@prefix afo: <https://w3id.org/afo/onto/1.1#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix essentia: <http://sovarr.c4dm.eecs.qmul.ac.uk/af/essentia/> .
@prefix mo: <http://purl.org/ontology/mo/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

essentia: a owl:Ontology ;
    dc:date "2017-01-19T19:32:10.222955" ;
    dc:description "This ontology represents audio feature extraction algorithms in the Essentia open source C++ library for audio analysis and audio-based music information retrieval"@en ;
    dc:title "Essentia Ontology"@en ;
    owl:versionInfo "Version 0.1" .

essentia:BeatsCount a owl:Class ;
    rdfs:label "Beats Count"@en ;
    rdfs:comment "beats count"@en ;
    rdfs:subClassOf afo:AudioFeature .

essentia:DerivativeMean a owl:Class ;
    rdfs:label "Derivative Mean"@en ;
    essentia:annotation_key "dmean" ;
    rdfs:comment "Mean of the derivative"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:DerivativeVariance a owl:Class ;
    rdfs:label "Derivative Variance"@en ;
    essentia:annotation_key "dvar" ;
    rdfs:comment "Variance of the derivative"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:InverseCovariance a owl:Class ;
    rdfs:label "Inverse Covariance"@en ;
    essentia:annotation_key "icov" ;
    rdfs:comment "Inverse covariance"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:Maximum a owl:Class ;
    rdfs:label "Maximum"@en ;
    essentia:annotation_key "max" ;
    rdfs:comment "Maximum value"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:Minimum a owl:Class ;
    rdfs:label "Minimum"@en ;
    essentia:annotation_key "min" ;
    rdfs:comment "Minimum value"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:SecondDerivativeMean a owl:Class ;
    rdfs:label "Second Derivative Mean"@en ;
    essentia:annotation_key "dmean2" ;
    rdfs:comment "Mean of the second derivative"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:SecondDerivativeVariance a owl:Class ;
    rdfs:label "Second Derivative Variance"@en ;
    essentia:annotation_key "dvar2" ;
    rdfs:comment "Variance of the second derivative"@en ;
    rdfs:subClassOf essentia:StatisticExtractors .

essentia:SilenceRateExtractor a owl:Class ;
    rdfs:label "Silence Rate Extractor"@en,
        "SilenceRate Extractor"@en ;
    dc:description "Given a list of thresholds, this algorithm creates a equally-sized list of outputs and returns 1 on a given output whenever the instant power of the input frame is below the given output's respective threshold, and returns 0 otherwise. This is done for each frame with respect to all outputs. In other words, if a given frame's instant power is below several given thresholds, then each of the corresponding outputs will emit a 1." ;
    rdfs:comment "SilenceRate Extractor"@en,
        "This algorithm estimates if a frame is silent. Given a list of thresholds, this algorithm creates a equally-sized list of outputs and returns 1 on a given output whenever the instant power of the input frame is below the given output's respective threshold, and returns 0 otherwise. This is done for each frame with respect to all outputs. In other words, if a given frame's instant power is below several given thresholds, then each of the corresponding outputs will emit a 1."@en ;
    rdfs:subClassOf essentia:Duration_silenceExtractors,
        afo:FeatureExtractor ;
    afo:input essentia:Frame ;
    afo:output essentia:SilenceRate ;
    afo:parameter [ afo:defaultValue "[]" ;
            afo:description "the threshold values" ;
            afo:name "thresholds" ;
            afo:type rdf:List ] .

essentia:THPCP a owl:Class ;
    rdfs:label "THPCP"@en ;
    rdfs:comment "Transposed Harmonic Pitch Class Profile"@en ;
    rdfs:subClassOf afo:AudioFeature .

essentia:ZeroCrossingRateExtractor a owl:Class ;
    rdfs:label "Zero Crossing Rate Extractor"@en ;
    rdfs:comment """
This algorithm computes the zero-crossing rate of an audio signal. It is the number of sign changes between consecutive signal values divided by the total number of values. Noisy signals tend to have higher zero-crossing rate. In order to avoid small variations around zero caused by noise, a threshold around zero is given to consider a valid zerocrosing whenever the boundary is crossed.

Empty input signals will raise an exception.

References:
[1] Zero Crossing - Wikipedia, the free encyclopedia, http://en.wikipedia.org/wiki/Zero-crossing_rate

[2] G. Peeters, "A large set of audio features for sound description (similarity and classification) in the CUIDADO project," CUIDADO I.S.T. Project Report, 2004
"""@en ;
    rdfs:subClassOf afo:FeatureExtractor ;
    afo:output essentia:ZeroCrossingRate .

essentia:annotation_key a owl:ObjectProperty ;
    rdfs:label "annotation_key"@en ;
    rdfs:comment "property for the statistic representation in JSON"@en ;
    rdfs:domain essentia:Statistic ;
    rdfs:range xsd:string .

essentia:bit_rate a owl:ObjectProperty ;
    rdfs:label "bit_rate"@en ;
    rdfs:comment "bit rate"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:integer .

essentia:codec a owl:ObjectProperty ;
    rdfs:label "codec"@en ;
    rdfs:comment "audio codec of the signal"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:string .

essentia:downmix a owl:ObjectProperty ;
    rdfs:label "downmix"@en ;
    rdfs:comment "downmix of the signal"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:string .

essentia:equal_loudness a owl:ObjectProperty ;
    rdfs:label "equal_loudness"@en ;
    rdfs:comment "equal loudness of the signal"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:string .

essentia:essentia_build_sha a owl:ObjectProperty ;
    rdfs:label "essentia_build_sha"@en ;
    rdfs:comment "essentia_build_sha"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:essentia_git_sha a owl:ObjectProperty ;
    rdfs:label "essentia_git_sha"@en ;
    rdfs:comment "essentia_git_sha"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:extractor a owl:ObjectProperty ;
    rdfs:label "extractor"@en ;
    rdfs:comment "extractor"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:gaia a owl:ObjectProperty ;
    rdfs:label "gaia"@en ;
    rdfs:comment "gaia"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:gaia_git_sha a owl:ObjectProperty ;
    rdfs:label "gaia_git_sha"@en ;
    rdfs:comment "gaia_git_sha"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:lossless a owl:ObjectProperty ;
    rdfs:label "lossless"@en ;
    rdfs:comment "boolean to indicate if the signal is lossless"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:boolean .

essentia:md5_encoded a owl:ObjectProperty ;
    rdfs:label "md5_encoded"@en ;
    rdfs:comment "md5 encoded"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:string .

essentia:models_essentia_git_sha a owl:ObjectProperty ;
    rdfs:label "models_essentia_git_sha"@en ;
    rdfs:comment "models_essentia_git_sha"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:replay_gain a owl:ObjectProperty ;
    rdfs:label "replay_gain"@en ;
    rdfs:comment "replay gain"@en ;
    rdfs:domain essentia:Signal ;
    rdfs:range xsd:float .

essentia:statistic a owl:ObjectProperty ;
    rdfs:label "statistic"@en ;
    rdfs:comment "links a statistical operation to an audio feature"@en ;
    rdfs:domain essentia:MirDescriptor ;
    rdfs:range essentia:Statistic .

essentia:version a owl:ObjectProperty ;
    rdfs:label "version"@en ;
    rdfs:comment "Essentia version"@en ;
    rdfs:domain essentia:VersionInfo ;
    rdfs:range xsd:string .

essentia:AfterMaxToBeforeMaxEnergyRatio a owl:Class ;
    rdfs:label "AfterMaxToBeforeMaxEnergyRatio"@en ;
    rdfs:comment "the ratio between the pitch energy after the pitch maximum to the pitch energy before the pitch maximum"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:AfterMaxToBeforeMaxEnergyRatioExtractor ;
    afo:type essentia:real .

essentia:AfterMaxToBeforeMaxEnergyRatioExtractor a owl:Class ;
    rdfs:label "AfterMaxToBeforeMaxEnergyRatio Extractor"@en ;
    dc:description """This algorithm calculates the ratio between the pitch energy after the pitch maximum and the pitch energy before the pitch maximum. Sounds having an monotonically ascending pitch or one unique pitch will show a value of (0,1], while sounds having a monotonically descending pitch will show a value of [1,inf). In case there is no energy before the max pitch, the algorithm will return the energy after the maximum pitch.

The algorithm throws exception when input is either empty or contains only zeros.""" ;
    rdfs:comment "AfterMaxToBeforeMaxEnergyRatio Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Pitch ;
    afo:output essentia:AfterMaxToBeforeMaxEnergyRatio .

essentia:Amplitudes a owl:Class ;
    rdfs:label "Amplitudes"@en ;
    rdfs:comment "the magnitude of each bpm candidate"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:NoveltyCurveFixedBpmEstimatorExtractor ;
    afo:type essentia:vector_real .

essentia:Audio a owl:Class ;
    rdfs:label "Audio"@en ;
    rdfs:comment "the audio input signal"@en ;
    afo:type essentia:vector_real .

essentia:BPMEstimates a owl:Class ;
    rdfs:label "BPMEstimates"@en ;
    rdfs:comment "See RhythmExtractor2013 algorithm documentation"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:vector_real .

essentia:BPMHistogram a owl:Class ;
    rdfs:label "BPMHistogram"@en ;
    rdfs:comment "bpm histogram [bpm]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor ;
    afo:type essentia:vector_real .

essentia:BPMIntervals a owl:Class ;
    rdfs:label "BPMIntervals"@en ;
    rdfs:comment "See RhythmExtractor2013 algorithm documentation"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:vector_real .

essentia:BPMintervals a owl:Class ;
    rdfs:label "BPMintervals"@en ;
    rdfs:comment "the list of bpm intervals [s]"@en ;
    afo:type essentia:vector_real .

essentia:BPMs a owl:Class ;
    rdfs:label "BPMs"@en ;
    rdfs:comment "list of bpm candidates"@en ;
    afo:type essentia:vector_real .

essentia:BarkBands a owl:Class ;
    rdfs:label "BarkBands"@en ;
    rdfs:comment "the energy of the bark bands"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BarkBandsExtractor ;
    afo:type essentia:vector_real .

essentia:BarkBandsExtractor a owl:Class ;
    rdfs:label "BarkBands Extractor"@en ;
    dc:description """This algorithm computes the spectral energy contained in a given number of bands, which correspond to an extrapolation of the Bark band scale [1]: 
[0.0, 50.0, 100.0, 150.0, 200.0, 300.0, 400.0, 510.0, 630.0, 770.0, 920.0, 1080.0, 1270.0, 1480.0, 1720.0, 2000.0, 2320.0, 2700.0, 3150.0, 3700.0, 4400.0, 5300.0, 6400.0, 7700.0, 9500.0, 12000.0, 15500.0, 20500.0, 27000.0]

For each bark band the power-spectrum (mag-squared) is summed. The first two bands [0,100] and [100,200] have been split in half for better resolution. It was observed that beat detection is better when this is done.

This algorithm uses FrequencyBands and thus inherits its input requirements and exceptions.

References:
  [1] The Bark Frequency Scale,
  http://ccrma.stanford.edu/~jos/bbt/Bark_Frequency_Scale.html""" ;
    rdfs:comment "BarkBands Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:BarkBands ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "27" ;
            afo:description "the number of desired barkbands" ;
            afo:maximumValue 28 ;
            afo:minimumValue 1 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Beat a owl:Class ;
    rdfs:label "Beat"@en ;
    rdfs:comment "the sliced beat"@en ;
    afo:type essentia:vector_real .

essentia:BeatTrackerDegaraExtractor a owl:Class ;
    rdfs:label "BeatTrackerDegara Extractor"@en ;
    dc:description """This algorithm estimates the beat locations given an input signal. It computes 'complex spectral difference' onset detection function and utilizes the beat tracking algorithm (TempoTapDegara) to extract beats [1]. The algorithm works with the optimized settings of 2048/1024 frame/hop size for the computation of the detection function, with its posterior x2 resampling.) While it has a lower accuracy than BeatTrackerMultifeature (see the evaluation results in [2]), its computational speed is significantly higher, which makes reasonable to apply this algorithm for batch processings of large amounts of audio signals.

Note that the algorithm requires the audio input with the 44100 Hz sampling rate in order to function correctly.

References:
  [1] N. Degara, E. A. Rua, A. Pena, S. Torres-Guijarro, M. E. Davies, and
  M. D. Plumbley, "Reliability-informed beat tracking of musical signals,"
  IEEE Transactions on Audio, Speech, and Language Processing, vol. 20,
  no. 1, pp. 290–301, 2012.

  [2] J. Zapata, M.E.P. Davies and E. Gómez, "Multi Feature Beat tracker,"
  submitted article to IEEE TSALP, 2013.
""" ;
    rdfs:comment "BeatTrackerDegara Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Ticks ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the slowest tempo to detect [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "the fastest tempo to detect [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ] .

essentia:BeatogramExtractor a owl:Class ;
    rdfs:label "Beatogram Extractor"@en ;
    dc:description """This algorithm filters the loudness matrix given by BeatsLoudness algorithm in order to keep only the most salient beat band representation.
This algorithm has been found to be useful for estimating time signatures.

Quality: experimental (not evaluated, do not use)""" ;
    rdfs:comment "Beatogram Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Loudness,
        essentia:Loudnessbandratio ;
    afo:output essentia:Beatogram ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "16" ;
            afo:description "number of beats for dynamic filtering" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "size" ;
            afo:type xsd:integer ] .

essentia:Beats a owl:Class ;
    rdfs:label "Beats"@en ;
    rdfs:comment "list of detected beat ticks [s]"@en ;
    afo:type essentia:vector_real .

essentia:BeatsChords a owl:Class ;
    rdfs:label "BeatsChords"@en ;
    rdfs:comment "the resulting chords, from A to G"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDetectionBeatsExtractor ;
    afo:type essentia:vector_string .

essentia:BeatsChordsStrength a owl:Class ;
    rdfs:label "BeatsChordsStrength"@en ;
    rdfs:comment "the strength of the chords"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDetectionBeatsExtractor ;
    afo:type essentia:vector_real .

essentia:BeatsLoudness a owl:Class ;
    rdfs:label "BeatsLoudness"@en ;
    rdfs:comment "the beat's energy in the whole spectrum"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BeatsLoudnessExtractor ;
    afo:type essentia:vector_real .

essentia:BeatsLoudnessBandRatio a owl:Class ;
    rdfs:label "BeatsLoudnessBandRatio"@en ;
    rdfs:comment "the ratio of the beat's energy on each frequency band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BeatsLoudnessExtractor ;
    afo:type essentia:vector_vector_real .

essentia:BeatsPosition a owl:Class ;
    rdfs:label "BeatsPosition"@en ;
    rdfs:comment "See RhythmExtractor2013 algorithm documentation"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:vector_real .

essentia:BpmRubatoRubatonumber a owl:Class ;
    rdfs:label "BpmRubatoRubatonumber"@en ;
    rdfs:comment "number of detected rubato regions"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmRubatoExtractor ;
    afo:type essentia:integer .

essentia:BpmRubatoRubatostart a owl:Class ;
    rdfs:label "BpmRubatoRubatostart"@en ;
    rdfs:comment "list of timestamps where the start of a rubato region was detected [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmRubatoExtractor ;
    afo:type essentia:vector_real .

essentia:BpmRubatoRubatostop a owl:Class ;
    rdfs:label "BpmRubatoRubatostop"@en ;
    rdfs:comment "list of timestamps where the end of a rubato region was detected [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmRubatoExtractor ;
    afo:type essentia:vector_real .

essentia:CentralMoments a owl:Class ;
    rdfs:label "CentralMoments"@en ;
    rdfs:comment "the central moments of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:CentralMomentsExtractor ;
    afo:type essentia:vector_real .

essentia:CentralMomentsExtractor a owl:Class ;
    rdfs:label "CentralMoments Extractor"@en ;
    dc:description """This algorithm extracts the 0th, 1st, 2nd, 3rd and 4th central moments of an array (i.e. it returns a 5-tuple in which the index corresponds to the order of the moment).

Central moments cannot be computed on arrays which size is less than 2, in which case an exception is thrown.

Note: the 'mode' parameter defines whether to treat array values as a probability distribution function (pdf) or as sample points of a distribution (sample).

References:
  [1] Sample Central Moment -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/SampleCentralMoment.html

  [2] Central Moment - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Central_moment""" ;
    rdfs:comment "CentralMoments Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:CentralMoments ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "the range of the input array, used for normalizing the results in the 'pdf' mode" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "range" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "pdf" ;
            afo:description "compute central moments considering array values as a probability density function over array index or as sample points of a distribution" ;
            afo:name "mode" ;
            afo:parameterValues "{pdf,sample}" ;
            afo:type xsd:string ] .

essentia:Centralmoments a owl:Class ;
    rdfs:label "Centralmoments"@en ;
    rdfs:comment "the central moments of a distribution"@en ;
    afo:type essentia:vector_real .

essentia:Centroid a owl:Class ;
    rdfs:label "Centroid"@en ;
    rdfs:comment "the centroid of the array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:CentroidExtractor ;
    afo:type essentia:real .

essentia:CentroidExtractor a owl:Class ;
    rdfs:label "Centroid Extractor"@en ;
    dc:description """This algorithm extracts the centroid, normalized to a specified range, of the input array [1]. In particular, it can be used to compute spectral centroid or temporal centroid.

The spectral centroid is a measure that indicates where the "center of mass" of the spectrum is. Perceptually, it has a robust connection with the impression of "brightness" of a sound, and therefore is used to characterise musical timbre. It is calculated as the weighted mean of the frequencies present in the signal, with their magnitudes as the weights.

The temporal centroid is the point in time in a signal that is a temporal balancing point of the sound event energy. It can be computed from the envelope of the signal across audio samples [3] (see Envelope algorithm) or over the RMS level of signal across frames [4] (see RMS algorithm).

Note:
- For a spectral centroid [hz], frequency range should be equal to samplerate/2
- For a temporal envelope centroid [s], range should be equal to (audio_size_in_samples-1) / samplerate
- Exceptions are thrown when input array contains less than 2 elements.

References:
  [1] Function Centroid -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/FunctionCentroid.html
  [2] Spectral centroid - Wikipedia, the free encyclopedia,
  https://en.wikipedia.org/wiki/Spectral_centroid
  [3] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004.
  [4] Klapuri, A., & Davy, M. (Eds.). (2007). Signal processing methods for
  music transcription. Springer Science & Business Media.""" ;
    rdfs:comment "Centroid Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Centroid ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "the range of the input array, used for normalizing the results" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "range" ;
            afo:type xsd:float ] .

essentia:ChordsChangesRate a owl:Class ;
    rdfs:label "ChordsChangesRate"@en ;
    rdfs:comment "the rate at which chords change in the progression"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDescriptorsExtractor ;
    afo:type essentia:real .

essentia:ChordsHistogram a owl:Class ;
    rdfs:label "ChordsHistogram"@en ;
    rdfs:comment "the normalized histogram of chords"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDescriptorsExtractor ;
    afo:type essentia:vector_real .

essentia:ChordsKey a owl:Class ;
    rdfs:label "ChordsKey"@en ;
    rdfs:comment "the most frequent chord of the progression"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDescriptorsExtractor ;
    afo:type essentia:string .

essentia:ChordsNumberRate a owl:Class ;
    rdfs:label "ChordsNumberRate"@en ;
    rdfs:comment "the ratio of different chords from the total number of chords in the progression"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDescriptorsExtractor ;
    afo:type essentia:real .

essentia:ChordsScale a owl:Class ;
    rdfs:label "ChordsScale"@en ;
    rdfs:comment "the scale of the most frequent chord of the progression (either 'major' or 'minor')"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDescriptorsExtractor ;
    afo:type essentia:string .

essentia:ChordsStrength a owl:Class ;
    rdfs:label "ChordsStrength"@en ;
    rdfs:comment "the strength of the chord"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ChordsDetectionExtractor ;
    afo:type essentia:vector_real .

essentia:Covariance a owl:Class ;
    rdfs:label "Covariance"@en ;
    essentia:annotation_key "cov" ;
    rdfs:comment "Covariance"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:computed_by essentia:SingleGaussianExtractor .

essentia:Crest a owl:Class ;
    rdfs:label "Crest"@en ;
    rdfs:comment "the crest of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:CrestExtractor ;
    afo:type essentia:real .

essentia:CrestExtractor a owl:Class ;
    rdfs:label "Crest Extractor"@en ;
    dc:description """This algorithm computes the crest of an array. The crest is defined as the ratio between the maximum value and the arithmetic mean of an array. Typically it is used on the magnitude spectrum.

Crest cannot be computed neither on empty arrays nor arrays which contain negative values. In such cases, exceptions will be thrown.

References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004""" ;
    rdfs:comment "Crest Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Crest .

essentia:Danceability a owl:Class ;
    rdfs:label "Danceability"@en ;
    rdfs:comment "the danceability value. Normal values range from 0 to ~3. The higher, the more danceable."@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DanceabilityExtractor ;
    afo:type essentia:real .

essentia:DanceabilityExtractor a owl:Class ;
    rdfs:label "Danceability Extractor"@en ;
    dc:description """Calculates the danceability vector for a given signal. The algorithm is
derived from Detrended Fluctuation Analysis (DFA) described in [1]. The
parameters minTau and maxTau are used to define the range of time over
which DFA will be performed. The output of this algorithm is the
danceability of the audio signal. These values usually range from 0 to 3
(higher values meaning more danceable).
Exception is thrown when minTau is greater than maxTau.
References:
  [1] Streich, S. and Herrera, P., Detrended Fluctuation Analysis of Music
  Signals: Danceability Estimation and further Semantic Characterization,
  Proceedings of the AES 118th Convention, Barcelona, Spain, 2005""" ;
    rdfs:comment "Danceability Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Danceability ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "310" ;
            afo:description "minimum segment length to consider [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minTau" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "8800" ;
            afo:description "maximum segment length to consider [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxTau" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1.1" ;
            afo:description "multiplier to increment from min to max tau" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "tauMultiplier" ;
            afo:type xsd:float ] .

essentia:Decrease a owl:Class ;
    rdfs:label "Decrease"@en ;
    rdfs:comment "the decrease of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DecreaseExtractor ;
    afo:type essentia:real .

essentia:DecreaseExtractor a owl:Class ;
    rdfs:label "Decrease Extractor"@en ;
    dc:description """This algorithm extracts the decrease of an array of Reals (which is defined as the linear regression coefficient). The range parameter is used to normalize the result. For a spectral centroid, the range should be equal to Nyquist and for an audio centroid the range should be equal to (audiosize - 1) / samplerate.
The size of the input array must be at least two elements for "decrease" to be computed, otherwise an exception is thrown.
References:
  [1] Least Squares Fitting -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/LeastSquaresFitting.html""" ;
    rdfs:comment "Decrease Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Decrease ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "the range of the input array, used for normalizing the results" ;
            afo:maximumValue "inf" ;
            afo:minimumValue "inf" ;
            afo:name "range" ;
            afo:type xsd:float ] .

essentia:DerivativeSFXDeravaftermax a owl:Class ;
    rdfs:label "DerivativeSFXDeravaftermax"@en ;
    rdfs:comment "the weighted average of the derivative after the maximum amplitude"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DerivativeSFXExtractor ;
    afo:type essentia:real .

essentia:DerivativeSFXMaxderbeforemax a owl:Class ;
    rdfs:label "DerivativeSFXMaxderbeforemax"@en ;
    rdfs:comment "the maximum derivative before the maximum amplitude"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DerivativeSFXExtractor ;
    afo:type essentia:real .

essentia:Detections a owl:Class ;
    rdfs:label "Detections"@en ;
    rdfs:comment "matrix containing onset detection functions--rows represent the values of different detection functions and columns represent different frames of audio (i.e. detections[i][j] represents the value of the ith detection function for the jth frame of audio)"@en ;
    afo:type essentia:matrix_real .

essentia:Dissonance a owl:Class ;
    rdfs:label "Dissonance"@en ;
    rdfs:comment "the dissonance of the audio signal (0 meaning completely consonant, and 1 meaning completely dissonant)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DissonanceExtractor ;
    afo:type essentia:real .

essentia:DissonanceExtractor a owl:Class ;
    rdfs:label "Dissonance Extractor"@en ;
    dc:description """This algorithm calculates the sensory dissonance (to distinguish from musical or theoretical dissonance) of an audio signal given its spectral peaks. Sensory dissonance measures perceptual roughness of the sound and is based on the roughness of its spectral peaks. Given the spectral peaks, the algorithm estimates total dissonance by summing up the normalized dissonance values for each pair of peaks. These values are computed using dissonance curves, which define dissonace between two spectral peaks according to their frequency and amplitude relations. The dissonance curves are based on perceptual experiments conducted in [1].
Exceptions are thrown when the size of the input vectors are not equal or if input frequencies are not ordered ascendantly
References:
  [1] R. Plomp and W. J. M. Levelt, "Tonal Consonance and Critical
  Bandwidth," The Journal of the Acoustical Society of America, vol. 38,
  no. 4, pp. 548–560, 1965.

  [2] Critical Band - Handbook for Acoustic Ecology
  http://www.sfu.ca/sonic-studio/handbook/Critical_Band.html

  [3] Bark Scale -  Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Bark_scale""" ;
    rdfs:comment "Dissonance Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:Dissonance .

essentia:DurationExtractor a owl:Class ;
    rdfs:label "Duration Extractor"@en ;
    dc:description "This algorithm returns the total length of a signal recording in seconds." ;
    rdfs:comment "Duration Extractor"@en ;
    rdfs:subClassOf essentia:Duration_silenceExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Duration ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:DynamicComplexity a owl:Class ;
    rdfs:label "DynamicComplexity"@en ;
    rdfs:comment "the dynamic complexity coefficient"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DynamicComplexityExtractor ;
    afo:type essentia:real .

essentia:DynamicComplexityLoudness a owl:Class ;
    rdfs:label "DynamicComplexityLoudness"@en ;
    rdfs:comment "an estimate of the loudness [dB]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DynamicComplexityExtractor ;
    afo:type essentia:real .

essentia:ERBBands a owl:Class ;
    rdfs:label "ERBBands"@en ;
    rdfs:comment "the energies/magnitudes of each band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ERBBandsExtractor ;
    afo:type essentia:vector_real .

essentia:ERBBandsExtractor a owl:Class ;
    rdfs:label "ERBBands Extractor"@en ;
    dc:description """This algorithm computes energies/magnitudes in bands spaced on an Equivalent Rectangular Bandwidth (ERB) scale, given a spectrum. It applies a frequency domain filterbank using gammatone filters. Adapted from matlab code in:  D. P. W. Ellis (2009). 'Gammatone-like spectrograms', web resource [1].

References:
  [1] http://www.ee.columbia.edu/~dpwe/resources/matlab/gammatonegram/

  [2] B. C. Moore and B. R. Glasberg, "Suggested formulae for calculating
  auditory-filter bandwidths and excitation patterns," Journal of the
  Acoustical Society of America, vol. 74, no. 3, pp. 750–753, 1983.""" ;
    rdfs:comment "ERBBands Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:ERBBands ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "energy" ;
            afo:description "compute energies or magnitudes" ;
            afo:name "type" ;
            afo:parameterValues "{energy,magnitude}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "filter width with respect to ERB" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "width" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "50" ;
            afo:description "a lower-bound limit for the frequencies to be included in the bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "an upper-bound limit for the frequencies to be included in the bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1025" ;
            afo:description "the size of the spectrum" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "inputSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the number of output bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ] .

essentia:EffectiveDuration a owl:Class ;
    rdfs:label "EffectiveDuration"@en ;
    rdfs:comment "the effective duration of the signal [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:EffectiveDurationExtractor ;
    afo:type essentia:real .

essentia:EffectiveDurationExtractor a owl:Class ;
    rdfs:label "EffectiveDuration Extractor"@en ;
    dc:description """This algorithm returns the effective duration of an envelope signal. The effective duration is a measure of the time the signal is perceptually meaningful. This is approximated by the time the envelope is above or equal to a given threshold and is above the -90db noise floor. This measure allows to distinguish percussive sounds from sustained sounds but depends on the signal length.
By default, this algorithm uses 40% of the envelope maximum as the threshold which is suited for short sounds. Note, that the 0% thresold corresponds to the duration of signal above -90db noise floor, while the 100% thresold corresponds to the number of times the envelope takes its maximum value.
References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004""" ;
    rdfs:comment "EffectiveDuration Extractor"@en ;
    rdfs:subClassOf essentia:Duration_silenceExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:EffectiveDuration ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.4" ;
            afo:description "the ratio of the envelope maximum to be used as the threshold" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "thresholdRatio" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Energy a owl:Class ;
    rdfs:label "Energy"@en ;
    rdfs:comment "the energy of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:EnergyExtractor ;
    afo:type essentia:real .

essentia:EnergyBand a owl:Class ;
    rdfs:label "EnergyBand"@en ;
    rdfs:comment "the energy in the frequency band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:EnergyBandExtractor ;
    afo:type essentia:real .

essentia:EnergyBandExtractor a owl:Class ;
    rdfs:label "EnergyBand Extractor"@en ;
    dc:description """This algorithm computes the spectral energy of the given frequency band, including both start and stop cutoff frequencies.
Note that exceptions will be thrown when input spectrum is empty and if startCutoffFrequency is greater than startCutoffFrequency.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Energy_(signal_processing)""" ;
    rdfs:comment "EnergyBand Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:EnergyBand ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the stop frequency to which to sum the energy [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "stopCutoffFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "the start frequency from which to sum the energy [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "startCutoffFrequency" ;
            afo:type xsd:float ] .

essentia:EnergyBandRatio a owl:Class ;
    rdfs:label "EnergyBandRatio"@en ;
    rdfs:comment "the energy ratio of the specified band over the total energy"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:EnergyBandRatioExtractor ;
    afo:type essentia:real .

essentia:EnergyBandRatioExtractor a owl:Class ;
    rdfs:label "EnergyBandRatio Extractor"@en ;
    dc:description """This algorithm computes the ratio of the spectral energy in the range [startFrequency, stopFrequency] over the total energy.

An exception is thrown when startFrequency is larger than stopFrequency
or the input spectrum is empty.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Energy_(signal_processing)""" ;
    rdfs:comment "EnergyBandRatio Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:EnergyBandRatio ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the frequency up to which to sum the energy [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "stopFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "the frequency from which to start summing the energy [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "startFrequency" ;
            afo:type xsd:float ] .

essentia:EnergyExtractor a owl:Class ;
    rdfs:label "Energy Extractor"@en ;
    dc:description """This algorithm computes the energy of an array of Reals.

The input array should not be empty or an exception will be thrown.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Energy_(signal_processing)""" ;
    rdfs:comment "Energy Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Energy .

essentia:Entropy a owl:Class ;
    rdfs:label "Entropy"@en ;
    rdfs:comment "the entropy of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:EntropyExtractor ;
    afo:type essentia:real .

essentia:EntropyExtractor a owl:Class ;
    rdfs:label "Entropy Extractor"@en ;
    dc:description """This algorithm computes the Shannon entropy of an array. Entropy can be used to quantify the peakiness of a distribution. This has been used for voiced/unvoiced decision in automatic speech recognition. 

Entropy cannot be computed neither on empty arrays nor arrays which contain negative values. In such cases, exceptions will be thrown.

References:
  [1] H. Misra, S. Ikbal, H. Bourlard and H. Hermansky, "Spectral entropy
  based feature for robust ASR," in IEEE International Conference on
  Acoustics, Speech, and Signal Processing (ICASSP'04).""" ;
    rdfs:comment "Entropy Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Entropy .

essentia:EnvelopeExtractor a owl:Class ;
    rdfs:label "Envelope Extractor"@en ;
    dc:description """This algorithm computes the envelope of a signal by applying a non-symmetric lowpass filter on a signal. By default it rectifies the signal, but that is optional.

References:
  [1] U. Zölzer, Digital Audio Signal Processing,
  John Wiley & Sons Ltd, 1997, ch.7""" ;
    rdfs:comment "Envelope Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Envelope ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "the attack time of the first order lowpass in the attack phase [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "attackTime" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "whether to apply rectification (envelope based on the absolute value of signal)" ;
            afo:name "applyRectification" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1500" ;
            afo:description "the release time of the first order lowpass in the release phase [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "releaseTime" ;
            afo:type xsd:float ] .

essentia:EqualTemperedDeviation a owl:Class ;
    rdfs:label "EqualTemperedDeviation"@en ;
    rdfs:comment "measure of the deviation of HPCP local maxima with respect to equal-tempered bins"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HighResolutionFeaturesExtractor ;
    afo:type essentia:real .

essentia:FadeDetectionFadein a owl:Class ;
    rdfs:label "FadeDetectionFadein"@en ;
    rdfs:comment "2D-array containing start/stop timestamps corresponding to fade-ins [s] (ordered chronologically)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FadeDetectionExtractor ;
    afo:type essentia:matrix_real .

essentia:FadeDetectionFadeout a owl:Class ;
    rdfs:label "FadeDetectionFadeout"@en ;
    rdfs:comment "2D-array containing start/stop timestamps corresponding to fade-outs [s] (ordered chronologically)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FadeDetectionExtractor ;
    afo:type essentia:matrix_real .

essentia:Features a owl:Class ;
    rdfs:label "Features"@en ;
    rdfs:comment "extracted features matrix (rows represent features, and columns represent frames of audio)"@en ;
    afo:type essentia:matrix_real .

essentia:Featuresframe a owl:Class ;
    rdfs:label "Featuresframe"@en ;
    rdfs:comment "input temporal features"@en ;
    afo:type essentia:vector_real .

essentia:Flatness a owl:Class ;
    rdfs:label "Flatness"@en ;
    rdfs:comment "the flatness (ratio between the geometric and the arithmetic mean of the input array)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FlatnessExtractor ;
    afo:type essentia:real .

essentia:FlatnessDB a owl:Class ;
    rdfs:label "FlatnessDB"@en ;
    rdfs:comment "the flatness dB"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FlatnessDBExtractor ;
    afo:type essentia:real .

essentia:FlatnessDBExtractor a owl:Class ;
    rdfs:label "FlatnessDB Extractor"@en ;
    dc:description """This algorithm computes the flatness of an array, which is defined as the ratio between the geometric mean and the arithmetic mean, and it converts it to dB scale.

Specifically, it can be used to compute spectral flatness [1,2], which is a measure of how noise-like a sound is, as opposed to being tone-like. The meaning of tonal in this context is in the sense of the amount of peaks or resonant structure in a power spectrum, as opposed to flat spectrum of a white noise. A high spectral flatness (approaching 1.0 for white noise) indicates that the spectrum has a similar amount of power in all spectral bands — this would sound similar to white noise, and the graph of the spectrum would appear relatively flat and smooth. A low spectral flatness (approaching 0.0 for a pure tone) indicates that the spectral power is concentrated in a relatively small number of bands — this would typically sound like a mixture of sine waves, and the spectrum would appear "spiky"

The size of the input array must be greater than 0. If the input array is empty an exception will be thrown. This algorithm uses the Flatness algorithm and thus inherits its input requirements and exceptions.

References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004

  [2] Spectral flatness -  Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Spectral_flatness""" ;
    rdfs:comment "FlatnessDB Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:FlatnessDB .

essentia:FlatnessExtractor a owl:Class ;
    rdfs:label "Flatness Extractor"@en ;
    dc:description """This algorithm computes the flatness of an array, which is defined as the ratio between the geometric mean and the arithmetic mean.

Flatness is undefined for empty input and negative values, therefore an exception is thrown in any both cases.

References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004""" ;
    rdfs:comment "Flatness Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Flatness .

essentia:FlatnessSFXExtractor a owl:Class ;
    rdfs:label "FlatnessSFX Extractor"@en ;
    dc:description """This algorithm calculates the flatness coefficient of a signal envelope.

There are two thresholds defined: a lower one at 20% and an upper one at 95%. The thresholds yield two values: one value which has 20% of the total values underneath, and one value which has 95% of the total values underneath. The flatness coefficient is then calculated as the ratio of these two values. This algorithm is meant to be plugged after Envelope algorithm, however in streaming mode a RealAccumulator algorithm should be connected in between the two.
In the current form the algorithm can't be calculated in streaming mode, since it would violate the streaming mode policy of having low memory consumption.

An exception is thrown if the input envelope is empty.""" ;
    rdfs:comment "FlatnessSFX Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Envelope ;
    afo:output essentia:FlatnessSFXFlatness .

essentia:FlatnessSFXFlatness a owl:Class ;
    rdfs:label "FlatnessSFXFlatness"@en ;
    rdfs:comment "the flatness coefficient"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FlatnessSFXExtractor ;
    afo:type essentia:real .

essentia:Flux a owl:Class ;
    rdfs:label "Flux"@en ;
    rdfs:comment "the spectral flux of the input spectrum"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FluxExtractor ;
    afo:type essentia:real .

essentia:FluxExtractor a owl:Class ;
    rdfs:label "Flux Extractor"@en ;
    dc:description """This algorithm calculates the spectral flux of a given spectrum. Flux is defined as the L2-norm [1] or L1-norm [2] of the difference between two consecutive frames of the magnitude spectrum. The frames have to be of the same size in order to yield a meaningful result. The default L2-norm is used more commonly.

An exception is thrown if the size of the input spectrum does not equal the previous input spectrum's size.

References:
  [1] Tzanetakis, G., Cook, P., "Multifeature Audio Segmentation for
  Browsing and Annotation", Proceedings of the 1999 IEEE Workshop on
  Applications of Signal Processing to Audio and Acoustics, New Paltz,
  NY, USA, 1999, W99 1-4

  [2] S. Dixon, "Onset detection revisited", in International Conference on
  Digital Audio Effects (DAFx'06), 2006, vol. 120, pp. 133-137.

  [3] http://en.wikipedia.org/wiki/Spectral_flux
""" ;
    rdfs:comment "Flux Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:Flux ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "half-rectify the differences in each spectrum bin" ;
            afo:name "halfRectify" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "L2" ;
            afo:description "the norm to use for difference computation" ;
            afo:name "norm" ;
            afo:parameterValues "{L1,L2}" ;
            afo:type xsd:string ] .

essentia:FrequencyBandsBands a owl:Class ;
    rdfs:label "FrequencyBandsBands"@en ;
    rdfs:comment "the energy in each band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:FrequencyBandsExtractor ;
    afo:type essentia:vector_real .

essentia:FrequencyBandsExtractor a owl:Class ;
    rdfs:label "FrequencyBands Extractor"@en ;
    dc:description """This algorithm computes the energy of an input spectrum for an arbitrary number of non overlapping frequency bands. For each band the power-spectrum (mag-squared) is summed.

Parameter "frequencyBands" must contain at least 2 frequencies, they all must be positive and must be ordered ascentdantly, otherwise an exception will be thrown. FrequencyBands is only defined for spectra, which size is greater than 1.

References:
  [1] Frequency Range - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Frequency_band

  [2] Band - Handbook For Acoustic Ecology,
  http://www.sfu.ca/sonic-studio/handbook/Band.html""" ;
    rdfs:comment "FrequencyBands Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:FrequencyBandsBands ;
    afo:parameter [ afo:defaultValue "[0, 50, 100, 150, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720, 2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500, 20500, 27000]" ;
            afo:description "list of frequency ranges in to which the spectrum is divided (these must be in ascending order and connot contain duplicates)" ;
            afo:name "frequencyBands" ;
            afo:type rdf:List ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Frequencybands a owl:Class ;
    rdfs:label "Frequencybands"@en ;
    rdfs:comment "the frequency bands"@en ;
    afo:type essentia:vector_vector_real .

essentia:GFCC a owl:Class ;
    rdfs:label "GFCC"@en ;
    rdfs:comment "the gammatone feature cepstrum coefficients"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:GFCCExtractor ;
    afo:type essentia:vector_real .

essentia:GFCCBands a owl:Class ;
    rdfs:label "GFCCBands"@en ;
    rdfs:comment "the energies in ERB bands"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:GFCCExtractor ;
    afo:type essentia:vector_real .

essentia:GeometricMean a owl:Class ;
    rdfs:label "GeometricMean"@en ;
    rdfs:comment "the geometric mean of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:GeometricMeanExtractor ;
    afo:type essentia:real .

essentia:GeometricMeanExtractor a owl:Class ;
    rdfs:label "GeometricMean Extractor"@en ;
    dc:description """This algorithm computes the geometric mean of an array of positive Reals.

An exception is thrown if the input array does not contain strict positive numbers or the array is empty.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Energy_(signal_processing)

  [2] Geometric Mean -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/GeometricMean.html""" ;
    rdfs:comment "GeometricMean Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:GeometricMean .

essentia:HFC a owl:Class ;
    rdfs:label "HFC"@en ;
    rdfs:comment "the high-frequency coefficient"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HFCExtractor ;
    afo:type essentia:real .

essentia:HFCExtractor a owl:Class ;
    rdfs:label "HFC Extractor"@en ;
    dc:description """This algorithm computes the High Frequency Content of a signal spectrum.
It can be computed according to the following techniques:
  - 'Masri' (default) which does: sum |X(n)|^2*k,
  - 'Jensen' which does: sum |X(n)|*k^2
  - 'Brossier' which does: sum |X(n)|*k

Exception is thrown for empty input spectra.

References:
  [1] P. Masri and A. Bateman, “Improved modelling of attack transients in
  music analysis-resynthesis,” in Proceedings of the International
  Computer Music Conference, 1996, pp. 100–103.

  [2] K. Jensen and T. H. Andersen, “Beat estimation on the beat,” in
  Applications of Signal Processing to Audio and Acoustics, 2003 IEEE
  Workshop on., 2003, pp. 87–90.

  [3] High frequency content measure - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/High_Frequency_Content_measure
""" ;
    rdfs:comment "HFC Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:HFC ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "Masri" ;
            afo:description "the type of HFC coefficient to be computed" ;
            afo:name "type" ;
            afo:parameterValues "{Masri,Jensen,Brossier}" ;
            afo:type xsd:string ] .

essentia:HPCPExtractor a owl:Class ;
    rdfs:label "HPCP Extractor"@en ;
    dc:description """Computes a Harmonic Pitch Class Profile (HPCP), that is a k*12 dimensional vector which represents the intensities of the twelve (k==1) semitone pitch classes (corresponsing to notes from A to G#), or subdivisions of these (k>1). It does this from the spectral peaks of a signal.
Regarding frequency parameters, exceptions are thrown if "minFrequency", "splitFrequency" and "maxFrequency" are not separated by at least 200Hz from each other, requiring that "maxFrequency" be greater than "splitFrequency" and "splitFrequency" be greater than "minFrequenc".Other exceptions are thrown if input vectors have different size, if parameter "size" is not a positive non-zero multiple of 12 or if "windowSize" is less than one hpcp bin (12/size).
References:
  [1] T. Fujishima, "Realtime Chord Recognition of Musical Sound: A System
  Using Common Lisp Music," in International Computer Music Conference
  (ICMC'99), pp. 464-467, 1999.
  [2] E. Gómez, "Tonal Description of Polyphonic Audio for Music Content
  Processing," INFORMS Journal on Computing, vol. 18, no. 3, pp. 294–304,
  2006.""" ;
    rdfs:comment "HPCP Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:HPCP ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "number of harmonics for frequency contribution, 0 indicates exclusive fundamental frequency contribution" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "harmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "5000" ;
            afo:description "the maximum frequency that contributes to the HPCP [Hz] (the difference between the max and split frequencies must not be less than 200.0 Hz)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "the size, in semitones, of the window used for the weighting" ;
            afo:maximumValue 12 ;
            afo:minimumValue 0 ;
            afo:name "windowSize" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "squaredCosine" ;
            afo:description "type of weighting function for determining frequency contribution" ;
            afo:name "weightType" ;
            afo:parameterValues "{none,cosine,squaredCosine}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the minimum frequency that contributes to the HPCP [Hz] (the difference between the min and split frequencies must not be less than 200.0 Hz)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "enables whether to use a band preset" ;
            afo:name "bandPreset" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "12" ;
            afo:description "the size of the output HPCP (must be a positive nonzero multiple of 12)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 12 ;
            afo:name "size" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "440" ;
            afo:description "the reference frequency for semitone index calculation, corresponding to A3 [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "enables whether to apply a Jordi non-linear post-processing function to the output" ;
            afo:name "nonLinear" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "500" ;
            afo:description "the split frequency for low and high bands, not used if bandPreset is false [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "splitFrequency" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "whether to shift the HPCP vector so that the maximum peak is at index 0" ;
            afo:name "maxShifted" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "whether to normalize the HPCP vector" ;
            afo:name "normalized" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ] .

essentia:HarmonicBpmExtractor a owl:Class ;
    rdfs:label "HarmonicBpm Extractor"@en ;
    dc:description """This algorithm extracts bpms that are harmonically related to the tempo given by the 'bpm' parameter.
The algorithm assumes a certain bpm is harmonically related to parameter bpm, when the greatest common divisor between both bpms is greater than threshold.
The 'tolerance' parameter is needed in order to consider if two bpms are related. For instance, 120, 122 and 236 may be related or not depending on how much tolerance is given

References:
  [1] Greatest common divisor - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Greatest_common_divisor""" ;
    rdfs:comment "HarmonicBpm Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:BPMs ;
    afo:output essentia:HarmonicBpmHarmonicbpms ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "bpm threshold below which greatest common divisors are discarded" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "threshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "5" ;
            afo:description "percentage tolerance to consider two bpms are equal or equal to a harmonic" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "60" ;
            afo:description "the bpm used to find its harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "bpm" ;
            afo:type xsd:integer ] .

essentia:HarmonicBpmHarmonicbpms a owl:Class ;
    rdfs:label "HarmonicBpmHarmonicbpms"@en ;
    rdfs:comment "a list of bpms which are harmonically related to the bpm parameter "@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HarmonicBpmExtractor ;
    afo:type essentia:vector_real .

essentia:HarmonicPeaksHarmonicfrequencies a owl:Class ;
    rdfs:label "HarmonicPeaksHarmonicfrequencies"@en ;
    rdfs:comment "the frequencies of harmonic peaks [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HarmonicPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:HarmonicPeaksHarmonicmagnitudes a owl:Class ;
    rdfs:label "HarmonicPeaksHarmonicmagnitudes"@en ;
    rdfs:comment "the magnitudes of harmonic peaks"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HarmonicPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:IndianArtMusicTonic a owl:Class ;
    rdfs:label "IndianArtMusicTonic"@en ;
    rdfs:comment "the estimated tonic frequency [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TonicIndianArtMusicExtractor ;
    afo:type essentia:real .

essentia:Inharmonicity a owl:Class ;
    rdfs:label "Inharmonicity"@en ;
    rdfs:comment "the inharmonicity of the audio signal"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:InharmonicityExtractor ;
    afo:type essentia:real .

essentia:InharmonicityExtractor a owl:Class ;
    rdfs:label "Inharmonicity Extractor"@en ;
    dc:description """This algorithm calculates the inharmonicity of a signal given its spectral peaks. The inharmonicity value is computed as an energy weighted divergence of the spectral components from their closest multiple of the fundamental frequency. The fundamental frequency is taken as the first spectral peak from the input. The inharmonicity value ranges from 0 (purely harmonic signal) to 1 (inharmonic signal).

Inharmonicity was designed to be fed by the output from the HarmonicPeaks algorithm. Note that DC components should be removed from the signal before obtaining its peaks. An exception is thrown if a peak is given at 0Hz.

An exception is thrown if frequency vector is not sorted in ascendently, if it contains duplicates or if any input vector is empty.

References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004.

  [2] Inharmonicity - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Inharmonicity""" ;
    rdfs:comment "Inharmonicity Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:Inharmonicity .

essentia:Input a owl:Class ;
    rdfs:label "Input"@en ;
    rdfs:comment "the input pool"@en ;
    afo:type essentia:pool .

essentia:InstantPower a owl:Class ;
    rdfs:label "InstantPower"@en ;
    rdfs:comment "the instant power of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:InstantPowerExtractor ;
    afo:type essentia:real .

essentia:InstantPowerExtractor a owl:Class ;
    rdfs:label "InstantPower Extractor"@en ;
    dc:description """This algorithm computes the instant power of an array. That is, the energy of the array over its size.

An exception is thrown when input array is empty.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Energy_(signal_processing)""" ;
    rdfs:comment "InstantPower Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:InstantPower .

essentia:Intensity a owl:Class ;
    rdfs:label "Intensity"@en ;
    rdfs:comment "the intensity value"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:IntensityExtractor ;
    afo:type essentia:integer .

essentia:IntensityExtractor a owl:Class ;
    rdfs:label "Intensity Extractor"@en ;
    dc:description """This algorithm classifies the input audio signal as either relaxed (-1), moderate (0), or aggressive (1).

Quality: outdated (non-reliable, poor accuracy).

An exception is thrown if empty input is provided because the "intensity" is not defined for that case.""" ;
    rdfs:comment "Intensity Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Intensity ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the input audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:KeyFirsttosecondrelativestrength a owl:Class ;
    rdfs:label "KeyFirsttosecondrelativestrength"@en ;
    rdfs:comment "the relative strength difference between the best estimate and second best estimate of the key"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:KeyExtractor ;
    afo:type essentia:real .

essentia:KeyScale a owl:Class ;
    rdfs:label "KeyScale"@en ;
    rdfs:comment "the scale of the key (major or minor)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:KeyExtractor ;
    afo:type essentia:string .

essentia:KeyStrength a owl:Class ;
    rdfs:label "KeyStrength"@en ;
    rdfs:comment "the strength of the estimated key"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:KeyExtractor ;
    afo:type essentia:real .

essentia:Kurtosis a owl:Class ;
    rdfs:label "Kurtosis"@en ;
    rdfs:comment "the kurtosis of the distribution"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DistributionShapeExtractor ;
    afo:type essentia:real .

essentia:LARM a owl:Class ;
    rdfs:label "LARM"@en ;
    rdfs:comment "the LARM loudness estimate [dB]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LarmExtractor ;
    afo:type essentia:real .

essentia:LEQ a owl:Class ;
    rdfs:label "LEQ"@en ;
    rdfs:comment "the equivalent sound level estimate"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LeqExtractor ;
    afo:type essentia:real .

essentia:LPC a owl:Class ;
    rdfs:label "LPC"@en ;
    rdfs:comment "the LPC coefficients"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LPCExtractor ;
    afo:type essentia:vector_real .

essentia:LPCReflection a owl:Class ;
    rdfs:label "LPCReflection"@en ;
    rdfs:comment "the reflection coefficients"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LPCExtractor ;
    afo:type essentia:vector_real .

essentia:LarmExtractor a owl:Class ;
    rdfs:label "Larm Extractor"@en ;
    dc:description """This algorithm estimates the long-term loudness of an audio signal. The LARM model is based on the asymmetrical low-pass filtering of the Peak Program Meter (PPM), combined with Revised Low-frequency B-weighting (RLB) and power mean calculations. LARM has shown to be a reliable and objective loudness estimate of music and speech.

It accepts a power parameter to define the exponential for computing the power mean. Note that if the parameter's value is 2, this algorithm would be equivalent to RMS and if 1, this algorithm would be the mean of the absolute value.

References:
 [1] E. Skovenborg and S. H. Nielsen, "Evaluation of different loudness
 models with music and speech material,” in The 117th AES Convention, 2004.""" ;
    rdfs:comment "Larm Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:LARM ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "the attack time of the first order lowpass in the attack phase [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "attackTime" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1.5" ;
            afo:description "the power used for averaging" ;
            afo:maximumValue "inf" ;
            afo:minimumValue "inf" ;
            afo:name "power" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1500" ;
            afo:description "the release time of the first order lowpass in the release phase [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "releaseTime" ;
            afo:type xsd:float ] .

essentia:LeqExtractor a owl:Class ;
    rdfs:label "Leq Extractor"@en ;
    dc:description """This algorithm computes the Equivalent sound level (Leq) of an audio signal. The Leq measure can be derived from the Revised Low-frequency B-weighting (RLB) or from the raw signal as described in [1]. If the signal contains no energy, Leq defaults to essentias definition of silence which is -90dB.
This algorithm will throw an exception on empty input.

References:
  [1] G. A. Soulodre, "Evaluation of Objective Loudness Meters," in
  The 116th AES Convention, 2004.""" ;
    rdfs:comment "Leq Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:LEQ .

essentia:LevelExtractor a owl:Class ;
    rdfs:label "LevelExtractor"@en ;
    dc:description "this algorithm extracts the loudness of an audio signal" ;
    rdfs:comment "LevelExtractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Loudness ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "hop size to compute loudness" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "88200" ;
            afo:description "frame size to compute loudness" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ] .

essentia:LogAttackTime a owl:Class ;
    rdfs:label "LogAttackTime"@en ;
    rdfs:comment "the log (base 10) of the attack time [log10(s)]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LogAttackTimeExtractor ;
    afo:type essentia:real .

essentia:LogAttackTimeExtractor a owl:Class ;
    rdfs:label "LogAttackTime Extractor"@en ;
    dc:description """This algorithm computes the log (base 10) of the attack time of a signal envelope. The attack time is defined as the time duration from when the sound becomes perceptually audible to when it reaches its maximum intensity. By default, the start of the attack is estimated as the point where the signal envelope reaches 20% of its maximum value in order to account for possible noise presence. Also by default, the end of the attack is estimated as as the point where the signal envelope has reached 90% of its maximum value, in order to account for the possibility that the max value occurres after the logAttack, as in trumpet sounds.

With this said, LogAttackTime's input is intended to be fed by the output of the Envelope algorithm. In streaming mode, the RealAccumulator algorithm should be connected between Envelope and LogAttackTime.

Note that startAttackThreshold cannot be greater than stopAttackThreshold and the input signal should not be empty. In any of these cases an exception will be thrown.
""" ;
    rdfs:comment "LogAttackTime Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:LogAttackTime ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "the percentage of the input signal envelope at which the starting point of the attack is considered" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "startAttackThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "the percentage of the input signal envelope at which the ending point of the attack is considered" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "stopAttackThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:LoudnessEBUR128Integratedloudness a owl:Class ;
    rdfs:label "LoudnessEBUR128Integratedloudness"@en ;
    rdfs:comment "integrated loudness (overall) (LUFS)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LoudnessEBUR128Extractor ;
    afo:type essentia:real .

essentia:LoudnessEBUR128Loudnessrange a owl:Class ;
    rdfs:label "LoudnessEBUR128Loudnessrange"@en ;
    rdfs:comment "loudness range over an arbitrary long time interval [3] (dB, LU)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LoudnessEBUR128Extractor ;
    afo:type essentia:real .

essentia:LoudnessEBUR128Momentaryloudness a owl:Class ;
    rdfs:label "LoudnessEBUR128Momentaryloudness"@en ;
    rdfs:comment "momentary loudness (over 400ms) (LUFS)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LoudnessEBUR128Extractor ;
    afo:type essentia:vector_real .

essentia:LoudnessEBUR128Shorttermloudness a owl:Class ;
    rdfs:label "LoudnessEBUR128Shorttermloudness"@en ;
    rdfs:comment "short-term loudness (over 3 seconds) (LUFS)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:LoudnessEBUR128Extractor ;
    afo:type essentia:vector_real .

essentia:LoudnessExtractor a owl:Class ;
    rdfs:label "Loudness Extractor"@en ;
    dc:description """This algorithm extracts the loudness of a signal, which is defined by Steven's power law as its energy raised to the power of 0.67.

References:
  [1] Energy (signal processing) - Wikipedia, the free encyclopedia
  http://en.wikipedia.org/wiki/Energy_(signal_processing)

  [2] Stevens' power law - Wikipedia, the free encyclopedia
  http://en.wikipedia.org/wiki/Stevens%27_power_law

  [3] S. S. Stevens, Psychophysics. Transaction Publishers, 1975.""" ;
    rdfs:comment "Loudness Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Loudness .

essentia:LoudnessVickersExtractor a owl:Class ;
    rdfs:label "LoudnessVickers Extractor"@en ;
    dc:description """This algorithm computes Vickers's loudness for a given audio signal. Currently, this algorithm only works for signals with a 44100Hz sampling rate. This algorithm is meant to be given frames of audio as input (not entire audio signals). The algorithm described in the paper performs a weighted average of the loudness value computed for each of the given frames, this step is left as a post processing step and is not performed by this algorithm.

References:
  [1] E. Vickers, "Automatic Long-term Loudness and Dynamics Matching," in
  The 111th AES Convention, 2001.""" ;
    rdfs:comment "LoudnessVickers Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Loudness ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate of the input signal which is used to create the weight vector [Hz] (currently, this algorithm only works on signals with a sampling rate of 44100Hz)" ;
            afo:maximumValue 44100 ;
            afo:minimumValue 44100 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Loudnessbandratio a owl:Class ;
    rdfs:label "Loudnessbandratio"@en ;
    rdfs:comment "matrix of loudness ratios at each band and beat"@en ;
    afo:type essentia:vector_vector_real .

essentia:MFCC a owl:Class ;
    rdfs:label "MFCC"@en ;
    rdfs:comment "the mel frequency cepstrum coefficients"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MFCCExtractor ;
    afo:type essentia:vector_real .

essentia:MFCCBands a owl:Class ;
    rdfs:label "MFCCBands"@en ;
    rdfs:comment "the energies in mel bands"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MFCCExtractor ;
    afo:type essentia:vector_real .

essentia:Matrix a owl:Class ;
    rdfs:label "Matrix"@en ;
    rdfs:comment "the input data matrix (e.g. the MFCC descriptor over frames)"@en ;
    afo:type essentia:matrix_real .

essentia:MaxMagFreq a owl:Class ;
    rdfs:label "MaxMagFreq"@en ;
    rdfs:comment "the frequency with the largest magnitude [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MaxMagFreqExtractor ;
    afo:type essentia:real .

essentia:MaxMagFreqExtractor a owl:Class ;
    rdfs:label "MaxMagFreq Extractor"@en ;
    dc:description """This algorithm computes the frequency with the largest magnitude.
Note that a spectrum must contain at least two elements otherwise an exception is thrown""" ;
    rdfs:comment "MaxMagFreq Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:MaxMagFreq ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:MaxToTotal a owl:Class ;
    rdfs:label "MaxToTotal"@en ;
    rdfs:comment "the maximum amplitude position to total length ratio"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MaxToTotalExtractor ;
    afo:type essentia:real .

essentia:MaxToTotalExtractor a owl:Class ;
    rdfs:label "MaxToTotal Extractor"@en ;
    dc:description """This algorithm computes the ratio between the index of the maximum value of the envelope of a signal and the total length of the envelope. This ratio shows how much the maximum amplitude is off-center. Its value is close to 0 if the maximum is close to the beginning (e.g. Decrescendo or Impulsive sounds), close to 0.5 if it is close to the middle (e.g. Delta sounds) and close to 1 if it is close to the end of the sound (e.g. Crescendo sounds). This algorithm is intended to be fed by the output of the Envelope algorithm

MaxToTotal will throw an exception if the input envelope is empty.""" ;
    rdfs:comment "MaxToTotal Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Envelope ;
    afo:output essentia:MaxToTotal .

essentia:MeanExtractor a owl:Class ;
    rdfs:label "Mean Extractor"@en ;
    dc:description "This algorithm extracts the mean of an array of Reals." ;
    rdfs:comment "Mean Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Mean .

essentia:Median a owl:Class ;
    rdfs:label "Median"@en ;
    essentia:annotation_key "median" ;
    rdfs:comment "the median of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MedianExtractor ;
    afo:type essentia:real .

essentia:MedianExtractor a owl:Class ;
    rdfs:label "Median Extractor"@en ;
    dc:description """This algorithm computes the median of an array of Reals. When there is an odd number of numbers, the median is simply the middle number. For example, the median of 2, 4, and 7 is 4. When there is an even number of numbers, the median is the mean of the two middle numbers. Thus, the median of the numbers 2, 4, 7, 12 is (4+7)/2 = 5.5. See [1] for more info.

References:
  [1] Statistical Median -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/StatisticalMedian.html""" ;
    rdfs:comment "Median Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Median .

essentia:MelBands a owl:Class ;
    rdfs:label "MelBands"@en ;
    rdfs:comment "the energy in mel bands"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MelBandsExtractor ;
    afo:type essentia:vector_real .

essentia:MelBandsExtractor a owl:Class ;
    rdfs:label "MelBands Extractor"@en ;
    dc:description """This algorithm computes the energy in mel bands for a given spectrum. It applies a frequency-domain filterbank (MFCC FB-40, [1]), which consists of equal area triangular filters spaced according to the mel scale. The filterbank is normalized in such a way that the sum of coefficients for every filter equals one. It is recommended that the input "spectrum" be calculated by the Spectrum algorithm.

It is required that parameter "highMelFrequencyBound" not be larger than the Nyquist frequency, but must be larger than the parameter, "lowMelFrequencyBound". Also, The input spectrum must contain at least two elements. If any of these requirements are violated, an exception is thrown.

References:
  [1] T. Ganchev, N. Fakotakis, and G. Kokkinakis, "Comparative evaluation
  of various MFCC implementations on the speaker verification task," in
  International Conference on Speach and Computer (SPECOM’05), 2005,
  vol. 1, pp. 191–194.

  [2] Mel-frequency cepstrum - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Mel_frequency_cepstral_coefficient""" ;
    rdfs:comment "MelBands Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:MelBands ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "24" ;
            afo:description "the number of output bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "an upper-bound limit for the frequencies to be included in the bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1025" ;
            afo:description "the size of the spectrum" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "inputSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sample rate" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "a lower-bound limit for the frequencies to be included in the bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowFrequencyBound" ;
            afo:type xsd:float ] .

essentia:Melbands a owl:Class ;
    rdfs:label "Melbands"@en ;
    rdfs:comment "the energy in the melbands"@en ;
    afo:type essentia:vector_vector_real .

essentia:Meter a owl:Class ;
    rdfs:label "Meter"@en ;
    rdfs:comment "the time signature"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MeterExtractor ;
    afo:type essentia:real .

essentia:MeterExtractor a owl:Class ;
    rdfs:label "Meter Extractor"@en ;
    dc:description """This algorithm estimates the time signature of a given beatogram by finding the highest correlation between beats.

Quality: experimental (not evaluated, do not use)""" ;
    rdfs:comment "Meter Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Beatogram ;
    afo:output essentia:Meter .

essentia:MinToTotal a owl:Class ;
    rdfs:label "MinToTotal"@en ;
    rdfs:comment "the minimum amplitude position to total length ratio"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MinToTotalExtractor ;
    afo:type essentia:real .

essentia:MinToTotalExtractor a owl:Class ;
    rdfs:label "MinToTotal Extractor"@en ;
    dc:description """This algorithm computes the ratio between the index of the minimum value of the envelope of a signal and the total length of the envelope.

An exception is thrown if the input envelop is empty.""" ;
    rdfs:comment "MinToTotal Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Envelope ;
    afo:output essentia:MinToTotal .

essentia:MirDescriptor a owl:Class ;
    rdfs:label "MIR descriptor"@en ;
    rdfs:comment "Music Information Retrieval descriptor"@en ;
    rdfs:subClassOf afo:AudioFeature .

essentia:MultiPitchKlapuriExtractor a owl:Class ;
    rdfs:label "MultiPitchKlapuri Extractor"@en ;
    dc:description """This algorithm estimates multiple pitch values corresponding to the melodic lines present in a polyphonic music signal (i.e. string quartet, piano). This implementation is based on the algorithm in [1]: In each frame, a set of possible fundamental frequency candidates is extracted based on the principle of harmonic summation. In an optimization stage, the number of harmonic sources (polyphony) is estimated and the final set of fundamental frequencies determined. In contrast to the pich salience function proposed in [2], this implementation uses the pitch salience function described in [1].
The output is a vector for each frame containing the estimated melody pitch values.

References:
  [1] A. Klapuri, "Multiple Fundamental Frequency Estimation by Summing Harmonic
  Amplitudes ", International Society for Music Information Retrieval Conference
  (2006).
  [2] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.

""" ;
    rdfs:comment "MultiPitchKlapuri Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:MultiPitch ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "spectral peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "80" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "number of considered harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1760" ;
            afo:description "the maximum allowed frequency for salience function peaks (ignore peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing pitch saliecnce" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.8" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter for the salience function (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ] .

essentia:MultiPitchMelodiaExtractor a owl:Class ;
    rdfs:label "MultiPitchMelodia Extractor"@en ;
    dc:description """This algorithm estimates multiple fundamental frequency contours from the input signal. It is a multi pitch version of the MELODIA algorithm described in [1]. While the algorithm is originally designed to extract melody in polyphonic music, this implementation is adapted for multiple sources. The approach is based on the creation and characterization of pitch contours, time continuous sequences of pitch candidates grouped using auditory streaming cues. To this end, PitchSalienceFunction, PitchSalienceFunctionPeaks, PitchContours, and PitchContoursMonoMelody algorithms are employed. It is strongly advised to use the default parameter values which are optimized according to [1] (where further details are provided) except for minFrequency, maxFrequency, and voicingTolerance, which will depend on your application.

The output is a vector of estimated melody pitch values and a vector of confidence values.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.

  [2] http://mtg.upf.edu/technologies/melodia

  [3] http://www.justinsalamon.com/melody-extraction
""" ;
    rdfs:comment "MultiPitchMelodia Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:MultiPitch ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "time continuity cue (the maximum allowed gap duration for a pitch contour) [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "timeContinuity" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "spectral peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "27.5625" ;
            afo:description "pitch continuity cue (maximum allowed pitch change during 1 ms time period) [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pitchContinuity" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter for the salience function (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the minimum allowed contour duration [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minDuration" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "per-frame salience threshold factor (fraction of the highest peak salience in a frame)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "peakFrameThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.8" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of considered harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of iterations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "allowed deviation below the peak salience mean over all frames (fraction of the standard deviation)" ;
            afo:maximumValue 2 ;
            afo:minimumValue 0 ;
            afo:name "peakDistributionThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing pitch saliecnce" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ] .

essentia:NonTemperedEnergyRatio a owl:Class ;
    rdfs:label "NonTemperedEnergyRatio"@en ;
    rdfs:comment "ratio between the energy on non-tempered bins and the total energy"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HighResolutionFeaturesExtractor ;
    afo:type essentia:real .

essentia:NonTemperedPeaksEnergyRatio a owl:Class ;
    rdfs:label "NonTemperedPeaksEnergyRatio"@en ;
    rdfs:comment "ratio between the energy on non-tempered peaks and the total energy"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HighResolutionFeaturesExtractor ;
    afo:type essentia:real .

essentia:NoveltyCurve a owl:Class ;
    rdfs:label "NoveltyCurve"@en ;
    rdfs:comment "the novelty curve as a single vector"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:NoveltyCurveExtractor ;
    afo:type essentia:vector_real .

essentia:NoveltyCurveExtractor a owl:Class ;
    rdfs:label "NoveltyCurve Extractor"@en ;
    dc:description """Given an audio signal, this algorithm computes the novelty curve, such as defined in [1].

References:
  [1] P. Grosche and M. Müller, "A mid-level representation for capturing
  dominant tempo and pulse information in music recordings," in
  International Society for Music Information Retrieval Conference
  (ISMIR’09), 2009, pp. 189–194.""" ;
    rdfs:comment "NoveltyCurve Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Frequencybands ;
    afo:output essentia:NoveltyCurve ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "whether to normalize each band's energy" ;
            afo:name "normalize" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "inverse_quadratic" ;
            afo:description "the type of weighting to be used for the bands novelty" ;
            afo:name "weightCurveType" ;
            afo:parameterValues "{flat,triangle,inverse_triangle,parabola,inverse_parabola,linear,quadratic,inverse_quadratic,supplied}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "344.531" ;
            afo:description "the sampling rate of the input audio" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "frameRate" ;
            afo:type xsd:float ],
        [ afo:defaultValue "[]" ;
            afo:description "vector containing the weights for each frequency band. Only if weightCurveType==supplied" ;
            afo:name "weightCurve" ;
            afo:type rdf:List ] .

essentia:OddToEvenHarmonicEnergyRatio a owl:Class ;
    rdfs:label "OddToEvenHarmonicEnergyRatio"@en ;
    rdfs:comment "the ratio between the odd and even harmonic energies of the given harmonic peaks"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:OddToEvenHarmonicEnergyRatioExtractor ;
    afo:type essentia:real .

essentia:OddToEvenHarmonicEnergyRatioExtractor a owl:Class ;
    rdfs:label "OddToEvenHarmonicEnergyRatio Extractor"@en ;
    dc:description """This algorithm computes the ratio between a signal's odd and even harmonic energy given the signal's harmonic peaks. The odd to even harmonic energy ratio is a measure allowing to distinguish odd-harmonic-energy predominant sounds (such as from a clarinet) from equally important even-harmonic-energy sounds (such as from a trumpet). The required harmonic frequencies and magnitudes can be computed by the HarmonicPeaks algorithm.
In the case when the even energy is zero, which may happen when only even harmonics where found or when only one peak was found, the algorithm outputs the maximum real number possible. Therefore, this algorithm should be used in conjunction with the harmonic peaks algorithm.
If no peaks are supplied, the algorithm outputs a value of one, assuming either the spectrum was flat or it was silent.

An exception is thrown if the input frequency and magnitude vectors have different size. Finally, an exception is thrown if the frequency and magnitude vectors are not ordered by ascending frequency.

References:
  [1] K. D. Martin and Y. E. Kim, "Musical instrument identification:
  A pattern-recognition approach," The Journal of the Acoustical Society of
  America, vol. 104, no. 3, pp. 1768–1768, 1998.

  [2] K. Ringgenberg et al., "Musical Instrument Recognition,"
  http://cnx.org/content/col10313/1.3/pdf""" ;
    rdfs:comment "OddToEvenHarmonicEnergyRatio Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:OddToEvenHarmonicEnergyRatio .

essentia:Onset a owl:Class ;
    rdfs:label "Onset"@en ;
    rdfs:comment "note onset times [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContourSegmentationExtractor ;
    afo:type essentia:vector_real .

essentia:OnsetDetection a owl:Class ;
    rdfs:label "OnsetDetection"@en ;
    rdfs:comment "the value of the detection function in the current frame"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:OnsetDetectionExtractor ;
    afo:type essentia:real .

essentia:OnsetDetectionExtractor a owl:Class ;
    rdfs:label "OnsetDetection Extractor"@en ;
    dc:description """This algorithm outputs an onset detection function useful for describing onset occurrences. The output of this algorithm should be post-processed in order to determine whether the frame contains an onset or not. Namely, it could be fed to the Onsets algorithm. It is recommended that the input "spectrum" is generated by the Spectrum algorithm.
Four methods are available:
  - 'HFC', the High Frequency Content detection function which accurately detects percussive events (see HFC algorithm for details).
  - 'complex', the Complex-Domain spectral difference function [1] taking into account changes in magnitude and phase. It emphasizes note onsets either as a result of significant change in energy in the magnitude spectrum, and/or a deviation from the expected phase values in the phase spectrum, caused by a change in pitch.
  - 'complex_phase', the simplified Complex-Domain spectral difference function [2] taking into account phase changes, weighted by magnitude. TODO:It reacts better on tonal sounds such as bowed string, but tends to over-detect percussive events.
  - 'flux', the Spectral Flux detection function which characterizes changes in magnitude spectrum. See Flux algorithm for details.
  - 'melflux', the spectral difference function, similar to spectral flux, but using half-rectified energy changes in Mel-frequency bands of the spectrum [3].
  - 'rms', the difference function, measuring the half-rectified change of the RMS of the magnitude spectrum (i.e., measuring overall energy flux) [4].

If using the 'HFC' detection function, make sure to adhere to HFC's input requirements when providing an input spectrum. Input vectors of different size or empty input spectra will raise exceptions.
If using the 'complex' detection function, suggested parameters for computation of "spectrum" and "phase" are 44100Hz sample rate, frame size of 1024 and hopSize of 512 samples, which results in a resolution of 11.6ms, and a Hann window.

References:
  [1] Bello, Juan P., Chris Duxbury, Mike Davies, and Mark Sandler, On the
  use of phase and energy for musical onset detection in the complex domain,
  Signal Processing Letters, IEEE 11, no. 6 (2004): 553-556.

  [2] P. Brossier, J. P. Bello, and M. D. Plumbley, "Fast labelling of notes
  in music signals," in International Symposium on Music Information
  Retrieval (ISMIR’04), 2004, pp. 331–336.

  [3] D. P. W. Ellis, "Beat Tracking by Dynamic Programming," Journal of
  New Music Research, vol. 36, no. 1, pp. 51–60, 2007.

  [4] J. Laroche, "Efficient Tempo and Beat Tracking in Audio Recordings,"
  JAES, vol. 51, no. 4, pp. 226–233, 2003.
""" ;
    rdfs:comment "OnsetDetection Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Phase,
        essentia:Spectrum ;
    afo:output essentia:OnsetDetection ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "hfc" ;
            afo:description "the method used for onset detection" ;
            afo:name "method" ;
            afo:parameterValues "{hfc,complex,complex_phase,flux,melflux,rms}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:OnsetDetectionGlobalExtractor a owl:Class ;
    rdfs:label "OnsetDetectionGlobal Extractor"@en ;
    dc:description """This algorithm outputs an onset detection function useful for describing onset occurrences. Detection values are computed frame-wisely given an input signal. The output of this algorithm should be post-processed in order to determine whether the frame contains an onset or not. Namely, it could be fed to the Onsets algorithm.
The following method are available:
  - 'infogain', the spectral difference measured by the modified information gain [1]. For each frame, it accounts for energy change in between preceding and consecutive frames, histogrammed together, in order to suppress short-term variations on frame-by-frame basis.
  - 'beat_emphasis', the beat emphasis function [1]. This function is a linear combination of onset detection functions (complex spectral differences) in a number of sub-bands, weighted by their beat strength computed over the entire input signal.
Note:
  - 'infogain' onset detection has been optimized for the default sampleRate=44100Hz, frameSize=2048, hopSize=512.
  - 'beat_emphasis' is optimized for a fixed resolution of 11.6ms, which corresponds to the default sampleRate=44100Hz, frameSize=1024, hopSize=512.
  Optimal performance of beat detection with TempoTapDegara is not guaranteed for other settings.

References:
  [1] S. Hainsworth and M. Macleod, "Onset detection in musical audio
  signals," in International Computer Music Conference (ICMC’03), 2003,
  pp. 163–6.

  [2] M. E. P. Davies, M. D. Plumbley, and D. Eck, "Towards a musical beat
  emphasis function," in IEEE Workshop on Applications of Signal Processing
  to Audio and Acoustics, 2009. WASPAA  ’09, 2009, pp. 61–64.""" ;
    rdfs:comment "OnsetDetectionGlobal Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:OnsetDetectionGlobalOnsetdetections ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "infogain" ;
            afo:description "the method used for onset detection" ;
            afo:name "method" ;
            afo:parameterValues "{infogain,beat_emphasis}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "512" ;
            afo:description "the hop size for computing onset detection function" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing onset detection function" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ] .

essentia:OnsetDetectionGlobalOnsetdetections a owl:Class ;
    rdfs:label "OnsetDetectionGlobalOnsetdetections"@en ;
    rdfs:comment "the frame-wise values of the detection function"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:OnsetDetectionGlobalExtractor ;
    afo:type essentia:vector_real .

essentia:OnsetRate a owl:Class ;
    rdfs:label "OnsetRate"@en ;
    rdfs:comment "the number of onsets per second"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:OnsetRateExtractor ;
    afo:type essentia:real .

essentia:Onsetdetections a owl:Class ;
    rdfs:label "Onsetdetections"@en ;
    rdfs:comment "the input frame-wise vector of onset detection values"@en ;
    afo:type essentia:vector_real .

essentia:OnsetsExtractor a owl:Class ;
    rdfs:label "Onsets Extractor"@en ;
    dc:description """This algorithm computes onset times in seconds from an array of detection functions extracted from an audio file.

The main operations are:
  - normalizing detection functions,
  - summing detection functions into a global detection function,
  - smoothing the global detection function,
  - thresholding the global detection function for silence,
  - finding the possible onsets using an adaptative threshold,
  - cleaning operations on the vector of possible onsets,
  - onsets time conversion.

Note:
  - This algorithm has been optimized for a frameRate of 44100.0/512.0.
  - At least one Detection function must be supplied at input.
  - The number of weights must match the number of detection functions.

As mentioned above, the "frameRate" parameter expects a value of 44100/512 (the default), but will work with other values, although the quality of the results is not guaranteed then. An exception is also thrown if the input "detections" matrix is empty. Finally, an exception is thrown if the size of the "weights" input does not equal the first dimension of the "detections" matrix.

References:
  [1] P. Brossier, J. P. Bello, and M. D. Plumbley, "Fast labelling of notes
  in music signals,” in International Symposium on Music Information
  Retrieval (ISMIR’04), 2004, pp. 331–336.""" ;
    rdfs:comment "Onsets Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Detections,
        essentia:Weights ;
    afo:output essentia:Onsets ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "86.1328" ;
            afo:description "frames per second" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "5" ;
            afo:description "the number of frames used to compute the threshold--size of short-onset filter" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "delay" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.02" ;
            afo:description "the threshold for silence" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "silenceThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "the proportion of the mean included to reject smaller peaks--filters very short onsets" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "alpha" ;
            afo:type xsd:float ] .

essentia:PCAExtractor a owl:Class ;
    rdfs:label "PCA Extractor"@en ;
    dc:description """Karhunen Loeve Transform || Principal Component Analysis based on the covariance matrix of the signal.

References:
  [1] Principal component analysis - Wikipedia, the free enciclopedia
  http://en.wikipedia.org/wiki/Principal_component_analysis""" ;
    rdfs:comment "PCA Extractor"@en ;
    rdfs:subClassOf essentia:TransformationExtractors ;
    afo:input essentia:Poolin ;
    afo:output essentia:PCAPoolout ;
    afo:parameter [ afo:defaultValue "spectral contrast" ;
            afo:description "will look for this namespace in poolIn" ;
            afo:name "namespaceIn" ;
            afo:type xsd:string ],
        [ afo:defaultValue "spectral contrast pca" ;
            afo:description "will save to this namespace in poolOut" ;
            afo:name "namespaceOut" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "number of dimension to reduce the input to" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "dimensions" ;
            afo:type xsd:integer ] .

essentia:PCAPoolout a owl:Class ;
    rdfs:label "PCAPoolout"@en ;
    rdfs:comment "the pool where to store the transformed feature vectors"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PCAExtractor ;
    afo:type essentia:pool .

essentia:PanningExtractor a owl:Class ;
    rdfs:label "Panning Extractor"@en ;
    dc:description """This algorithm extracts parameterized curves of the panorama distribution for each audio frame by comparing spectra from the left and right channels. In order to obtain a complete representation of the panorama, the fft of the resulting coefficients must be computed. The resulting spectrum, will show peaks on the initial bins for left panned audio, and right panning will appear as peaks in the upper bins.
Note: At present time, the original algorithm has not been tested in multiband mode. That is, numBands must remain 1.
References:
  [1] E. Gómez, P. Herrera, P. Cano, J. Janer, J. Serrà, J. Bonada,
  S. El-Hajj, T. Aussenac, and G. Holmberg, "Music similarity systems and
  methods using descriptors,” U.S. Patent WO 2009/0012022009.""" ;
    rdfs:comment "Panning Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrumleft,
        essentia:Spectrumright ;
    afo:output essentia:PanningPanningcoeffs ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "512" ;
            afo:description "size of the histogram of ratios (in bins)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "panningBins" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "number of mel bands" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "43" ;
            afo:description "number of frames to take into account for averaging" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "averageFrames" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "if true, warped panorama is applied, having more resolution in the center area" ;
            afo:name "warpedPanorama" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of coefficients used to define the panning curve at each frame" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "numCoeffs" ;
            afo:type xsd:integer ] .

essentia:PanningPanningcoeffs a owl:Class ;
    rdfs:label "PanningPanningcoeffs"@en ;
    rdfs:comment "Parameters that define the panning curve at each frame"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PanningExtractor ;
    afo:type essentia:matrix_real .

essentia:Peakbins a owl:Class ;
    rdfs:label "Peakbins"@en ;
    rdfs:comment "frame-wise array of cent bins corresponding to pitch salience function peaks"@en ;
    afo:type essentia:vector_vector_real .

essentia:Peaks a owl:Class ;
    rdfs:label "Peaks"@en ;
    rdfs:comment "the input novelty"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SuperFluxPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:Peaksaliences a owl:Class ;
    rdfs:label "Peaksaliences"@en ;
    rdfs:comment "frame-wise array of values of salience function peaks"@en ;
    afo:type essentia:vector_vector_real .

essentia:Periods a owl:Class ;
    rdfs:label "Periods"@en ;
    rdfs:comment "tempo period candidates for the current frame, in frames"@en ;
    afo:type essentia:vector_real .

essentia:Phase a owl:Class ;
    rdfs:label "Phase"@en ;
    rdfs:comment "the phase vector corresponding to this spectrum--used only by the \"complex\" method"@en ;
    afo:type essentia:vector_real .

essentia:Phases a owl:Class ;
    rdfs:label "Phases"@en ;
    rdfs:comment "tempo ticks phase candidates for the current frame, in frames"@en ;
    afo:type essentia:vector_real .

essentia:PitchContourSegmentationMidipitch a owl:Class ;
    rdfs:label "PitchContourSegmentationMidipitch"@en ;
    rdfs:comment "quantized MIDI pitch value"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContourSegmentationExtractor ;
    afo:type essentia:vector_real .

essentia:PitchContoursContoursbins a owl:Class ;
    rdfs:label "PitchContoursContoursbins"@en ;
    rdfs:comment "array of frame-wise vectors of cent bin values representing each contour"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursExtractor ;
    afo:type essentia:vector_vector_real .

essentia:PitchContoursContourssaliences a owl:Class ;
    rdfs:label "PitchContoursContourssaliences"@en ;
    rdfs:comment "array of frame-wise vectors of pitch saliences representing each contour"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursExtractor ;
    afo:type essentia:vector_vector_real .

essentia:PitchContoursContoursstarttimes a owl:Class ;
    rdfs:label "PitchContoursContoursstarttimes"@en ;
    rdfs:comment "array of start times of each contour [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursExtractor ;
    afo:type essentia:vector_real .

essentia:PitchContoursDuration a owl:Class ;
    rdfs:label "PitchContoursDuration"@en ;
    rdfs:comment "time duration of the input signal [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursExtractor ;
    afo:type essentia:real .

essentia:PitchContoursMelodyPitchconfidence a owl:Class ;
    rdfs:label "PitchContoursMelodyPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursMelodyExtractor ;
    afo:type essentia:vector_real .

essentia:PitchContoursMonoMelodyPitchconfidence a owl:Class ;
    rdfs:label "PitchContoursMonoMelodyPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursMonoMelodyExtractor ;
    afo:type essentia:vector_real .

essentia:PitchContoursMultiMelodyExtractor a owl:Class ;
    rdfs:label "PitchContoursMultiMelody Extractor"@en ;
    dc:description """This algorithm post-processes a set of pitch contours into a sequence of mutliple f0 values in Hz.
This algorithm is intended to receive its "contoursBins", "contoursSaliences", and "contoursStartTimes" inputs from the PitchContours algorithm. The "duration" input corresponds to the time duration of the input signal. The output is a vector of estimated pitch values

When input vectors differ in size, or "numberFrames" is negative, an exception is thrown. Input vectors must not contain negative start indices nor negative bin and salience values otherwise an exception is thrown.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.
""" ;
    rdfs:comment "PitchContoursMultiMelody Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Contoursbins,
        essentia:Contourssaliences,
        essentia:Contoursstarttimes,
        essentia:Duration ;
    afo:output essentia:PitchContoursMultiMelodyPitch ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "Estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of interations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "80" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal (Hz)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ] .

essentia:PitchContoursMultiMelodyPitch a owl:Class ;
    rdfs:label "PitchContoursMultiMelodyPitch"@en ;
    rdfs:comment "vector of estimated pitch values (i.e., melody) [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchContoursMultiMelodyExtractor ;
    afo:type essentia:vector_vector_real .

essentia:PitchFilterExtractor a owl:Class ;
    rdfs:label "PitchFilter Extractor"@en ;
    dc:description """This algorithm corrects the fundamental frequency estimations for a sequence of frames given pitch values together with their confidence values (e.g., by removing non-confident parts and spurious jumps in pitch, and applying octave corrections).

They can be computed with the PitchYinFFT, PitchYin, or PredominantPitchMelodia algorithms.
If you use PredominantPitchMelodia with guessUnvoiced=True, set useAbsolutePitchConfidence=True.

The algorithm can be used for any type of monophonic and heterophonic music.

The original algorithm [1] was proposed to be used for Makam music and employs signal"energy" of frames instead of pitch confidence.

References:
  [1] B. Bozkurt, "An Automatic Pitch Analysis Method for Turkish Maqam
  Music," Journal of New Music Research. 37(1), 1-13.
""" ;
    rdfs:comment "PitchFilter Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Pitch,
        essentia:Pitchconfidence ;
    afo:output essentia:PitchFilterPitchfiltered ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "36" ;
            afo:description "ratio between the average confidence of the most confident chunk and the minimum allowed average confidence of a chunk" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "confidenceThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "30" ;
            afo:description "minumum number of frames in non-zero pitch chunks" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minChunkSize" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "treat negative pitch confidence values as positive (use with melodia guessUnvoiced=True)" ;
            afo:name "useAbsolutePitchConfidence" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ] .

essentia:PitchFilterPitchfiltered a owl:Class ;
    rdfs:label "PitchFilterPitchfiltered"@en ;
    rdfs:comment "vector of corrected pitch values [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchFilterExtractor ;
    afo:type essentia:vector_real .

essentia:PitchMelodiaPitchconfidence a owl:Class ;
    rdfs:label "PitchMelodiaPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchMelodiaExtractor ;
    afo:type essentia:vector_real .

essentia:PitchSalience a owl:Class ;
    rdfs:label "PitchSalience"@en ;
    rdfs:comment "the pitch salience (normalized from 0 to 1)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchSalienceExtractor ;
    afo:type essentia:real .

essentia:PitchSalienceExtractor a owl:Class ;
    rdfs:label "PitchSalience Extractor"@en ;
    dc:description """This algorithm computes the pitch salience of a spectrum. The pitch salience is given by the ratio of the highest auto correlation value of the spectrum to the non-shifted auto correlation value. Pitch salience was designed as quick measure of tone sensation. Unpitched sounds (non-musical sound effects) and pure tones have an average pitch salience value close to 0 whereas sounds containing several harmonics in the spectrum tend to have a higher value.

Note that this algorithm may give better results when used with low sampling rates (i.e. 8000) as the information in the bands musically meaningful will have more relevance.

This algorithm uses AutoCorrelation on the input "spectrum" and thus inherits its input requirements and exceptions. An exception is thrown at configuration time if "lowBoundary" is larger than "highBoundary" and/or if "highBoundary" is not smaller than half "sampleRate". At computation time, an exception is thrown if the input spectrum is empty. Also note that feeding silence to this algorithm will return zero.

Application: characterizing percussive sounds.

References:
  [1] J. Ricard "Towards computational morphological description of sound.
  DEA pre-thesis research work, Universitat Pompeu Fabra, Barcelona, 2004.""" ;
    rdfs:comment "PitchSalience Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:PitchSalience ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "5000" ;
            afo:description "until which frequency we are looking for the minimum (must be smaller than half sampleRate) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highBoundary" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "from which frequency we are looking for the maximum (must not be larger than highBoundary) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowBoundary" ;
            afo:type xsd:float ] .

essentia:PitchSalienceFunctionExtractor a owl:Class ;
    rdfs:label "PitchSalienceFunction Extractor"@en ;
    dc:description """This algorithm computes the pitch salience function of a signal frame given its spectral peaks. The salience function covers a pitch range of nearly five octaves (i.e., 6000 cents), starting from the "referenceFrequency", and is quantized into cent bins according to the specified "binResolution". The salience of a given frequency is computed as the sum of the weighted energies found at integer multiples (harmonics) of that frequency. 

This algorithm is intended to receive its "frequencies" and "magnitudes" inputs from the SpectralPeaks algorithm. The output is a vector of salience values computed for the cent bins. The 0th bin corresponds to the specified "referenceFrequency".

When input vectors differ in size or are empty, an exception is thrown. Input vectors must contain positive frequencies and not contain negative magnitudes otherwise an exception is thrown. It is highly recommended to avoid erroneous peak duplicates (peaks of the same frequency occuring more than ones), but it is up to the user's own control and no exception will be thrown.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.
""" ;
    rdfs:comment "PitchSalienceFunction Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:PitchSalienceFunctionSaliencefunction ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.8" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of considered harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ] .

essentia:PitchSalienceFunctionPeaksSaliencebins a owl:Class ;
    rdfs:label "PitchSalienceFunctionPeaksSaliencebins"@en ;
    rdfs:comment "the cent bins corresponding to salience function peaks"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchSalienceFunctionPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:PitchSalienceFunctionPeaksSaliencevalues a owl:Class ;
    rdfs:label "PitchSalienceFunctionPeaksSaliencevalues"@en ;
    rdfs:comment "the values of salience function peaks"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchSalienceFunctionPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:PitchSalienceFunctionSaliencefunction a owl:Class ;
    rdfs:label "PitchSalienceFunctionSaliencefunction"@en ;
    rdfs:comment "array of the quantized pitch salience values"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchSalienceFunctionExtractor ;
    afo:type essentia:vector_real .

essentia:PitchYinFFTPitchconfidence a owl:Class ;
    rdfs:label "PitchYinFFTPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected [0,1]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchYinFFTExtractor ;
    afo:type essentia:real .

essentia:PitchYinPitchconfidence a owl:Class ;
    rdfs:label "PitchYinPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected [0,1]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PitchYinExtractor ;
    afo:type essentia:real .

essentia:Pitchconfidence a owl:Class ;
    rdfs:label "Pitchconfidence"@en ;
    rdfs:comment "vector of pitch confidence values for the input frames"@en ;
    afo:type essentia:vector_real .

essentia:PoolAggregatorExtractor a owl:Class ;
    rdfs:label "PoolAggregator Extractor"@en ;
    dc:description """This algorithm performs statistical aggregation on a Pool and places the results of the aggregation into a new Pool. Supported statistical units are:
	'min' (minimum),
	'max' (maximum),
	'median'
	'mean'
	'var' (variance),
	'skew' (skewness),
	'kurt' (kurtosis),
	'dmean' (mean of the derivative),
	'dvar' (variance of the derivative),
	'dmean2' (mean of the second derivative),
	'dvar2' (variance of the second derivative),
	'cov' (covariance), and
	'icov' (inverse covariance).
	'copy' (verbatim copy of descriptor, no aggregation; exclusive: cannot be performed with any other statistical units).
	'value' (copy of the descriptor, but the value is placed under the name '<descriptor name>.value')

These statistics can be computed for single dimensional vectors in a Pool, with the exception of 'cov' and 'icov'. All of the above statistics can be
computed for two dimensional vectors in the Pool. With the exception of 'cov' and 'icov', two-dimensional statistics are calculated by aggregating
each column and placing the result into a vector of the same size as the size of each vector in the input Pool. The previous implies that each
vector in the pool (under a particular descriptor of course) must have equal size. This implication also applies for 'cov' and 'icov'.

An additional restriction for using the 'icov' statistic is that the covariance matrix for a particular descriptor must be invertible. The 'cov' and 'icov' aggregation statistics each return a square matrix with dimension equal to the length of the vectors under the given descriptor.

Please also note that only the absolute values of the first and second derivates are considered when calculating the mean ('dmean' and 'dmean2') as well as for the variance ('dvar' and 'dvar2'). This is to avoid a trivial solution for the mean.""" ;
    rdfs:comment "PoolAggregator Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Input ;
    afo:output essentia:PoolAggregatorOutput ;
    afo:parameter [ afo:defaultValue "{}" ;
            afo:description "a mapping between descriptor names (no duplicates) and the types of statistics to be computed for those descriptors (e.g. { lowlevel.bpm : [min, max], lowlevel.gain : [var, min, dmean] })" ;
            afo:name "exceptions" ;
            afo:type rdf:List ],
        [ afo:defaultValue "[\"mean\", \"var\", \"min\", \"max\", \"median\"]" ;
            afo:description "the default statistics to be computed for each descriptor in the input pool" ;
            afo:name "defaultStats" ;
            afo:type rdf:List ] .

essentia:PoolAggregatorOutput a owl:Class ;
    rdfs:label "PoolAggregatorOutput"@en ;
    rdfs:comment "a pool containing the aggregate values of the input pool"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PoolAggregatorExtractor ;
    afo:type essentia:pool .

essentia:Poolin a owl:Class ;
    rdfs:label "Poolin"@en ;
    rdfs:comment "the pool where to get the spectral contrast feature vectors"@en ;
    afo:type essentia:pool .

essentia:PowerMean a owl:Class ;
    rdfs:label "PowerMean"@en ;
    rdfs:comment "the power mean of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PowerMeanExtractor ;
    afo:type essentia:real .

essentia:PowerMeanExtractor a owl:Class ;
    rdfs:label "PowerMean Extractor"@en ;
    dc:description """This algorithm extracts the Power Mean of an array of Reals. It accepts one parameter, p, which is the power (or order or degree) of the Power Mean. Note that if p=-1, the Power Mean is equal to the Harmonic Mean, if p=0, the Power Mean is equal to the Geometric Mean, if p=1, the Power Mean is equal to the Arithmetic Mean, if p=2, the Power Mean is equal to the Root Mean Square.

Exceptions are thrown if input array either is empty or it contains non positive numbers.

References:
  [1] Power Mean -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/PowerMean.html""" ;
    rdfs:comment "PowerMean Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:PowerMean ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "the power to which to elevate each element before taking the mean" ;
            afo:maximumValue "inf" ;
            afo:minimumValue "inf" ;
            afo:name "power" ;
            afo:type xsd:float ] .

essentia:PowerSpectrum a owl:Class ;
    rdfs:label "PowerSpectrum"@en ;
    rdfs:comment "the power spectrum of the input signal"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PowerSpectrumExtractor ;
    afo:type essentia:vector_real .

essentia:PowerSpectrumExtractor a owl:Class ;
    rdfs:label "PowerSpectrum Extractor"@en ;
    dc:description """This algorithm computes the power spectrum of an array of Reals. The resulting power spectrum is of the same size as the incoming frame.

References:
  [1] Power Spectrum - from Wolfram MathWorld,
  http://mathworld.wolfram.com/PowerSpectrum.html""" ;
    rdfs:comment "PowerSpectrum Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:PowerSpectrum ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "the expected size of the input frame (this is purely optional and only targeted at optimizing the creation time of the FFT object)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "size" ;
            afo:type xsd:integer ] .

essentia:PredominantPitchMelodiaPitchconfidence a owl:Class ;
    rdfs:label "PredominantPitchMelodiaPitchconfidence"@en ;
    rdfs:comment "confidence with which the pitch was detected"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:PredominantPitchMelodiaExtractor ;
    afo:type essentia:vector_real .

essentia:RMSExtractor a owl:Class ;
    rdfs:label "RMS Extractor"@en ;
    dc:description """This algorithm computes the Root Mean Square (quadratic mean) of an array of Reals.
RMS is not defined for empty arrays. In such case, an exception will be thrown
.
References:
  [1] Root mean square - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Root_mean_square""" ;
    rdfs:comment "RMS Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:RMS .

essentia:RawMoments a owl:Class ;
    rdfs:label "RawMoments"@en ;
    rdfs:comment "the (raw) moments of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RawMomentsExtractor ;
    afo:type essentia:vector_real .

essentia:RawMomentsExtractor a owl:Class ;
    rdfs:label "RawMoments Extractor"@en ;
    dc:description """This algorithm computes the first 5 raw moments of an array of Reals. The output array is of size 6 because the zero-ith moment is used for padding so that the first moment corresponds to index 1.

Note:
  This algorithm has a range parameter, which usually represents a frequency (results will range from 0 to range). For a spectral centroid, the range should be equal to samplerate / 2. For an audio centroid, the frequency range should be equal to (audio_size-1) / samplerate.

An exception is thrown if the input array's size is smaller than 2.

References:
  [1] Raw Moment -- from Wolfram MathWorld,
  http://mathworld.wolfram.com/RawMoment.html""" ;
    rdfs:comment "RawMoments Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:RawMoments ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "the range of the input array, used for normalizing the results" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "range" ;
            afo:type xsd:float ] .

essentia:ReplayGain a owl:Class ;
    rdfs:label "ReplayGain"@en ;
    rdfs:comment "the distance to the suitable average replay level (~-31dbB) defined by SMPTE [dB]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:ReplayGainExtractor ;
    afo:type essentia:real .

essentia:ReplayGainExtractor a owl:Class ;
    rdfs:label "ReplayGain Extractor"@en ;
    dc:description """This algorithm returns the Replay Gain loudness value of the audio. The algorithm is described in detail at [1]. The value returned is the 'standard' ReplayGain value, not the value with 6dB preamplification as it is computed by lame, mp3gain, vorbisgain, and all widely used ReplayGain programs.

This algorithm is only defined for input signals which size is larger than 0.05ms, otherwise an exception will be thrown.

References:
  [1] Replay Gain - A Proposed Standard, http://replaygain.hydrogenaudio.org
""" ;
    rdfs:comment "ReplayGain Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:ReplayGain ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the input audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Rhythm a owl:Class ;
    rdfs:label "Rhythm"@en ;
    rdfs:comment "consecutive frames in the rhythm domain"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmTransformExtractor ;
    afo:type essentia:vector_vector_real .

essentia:RhythmExtractor2013Bpmintervals a owl:Class ;
    rdfs:label "RhythmExtractor2013Bpmintervals"@en ;
    rdfs:comment "list of beats interval [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmExtractor2013 ;
    afo:type essentia:vector_real .

essentia:RhythmExtractorBpmintervals a owl:Class ;
    rdfs:label "RhythmExtractorBpmintervals"@en ;
    rdfs:comment "list of beats interval [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmExtractor ;
    afo:type essentia:vector_real .

essentia:RhythmTransformExtractor a owl:Class ;
    rdfs:label "RhythmTransform Extractor"@en ;
    dc:description """The Rhythm Transform algorithm is based on the rhythm transform as described in [1]. It computes a rhythmical representation of the input signal in the rhythm domain much like FFT computes a representation in the frequency domain. Additionally features as rhythmic centroid and MFCCs can be calculated from this rhythmic representation.
Note that parameters "frameSize" and "hopSize" are defined for the rhythm transformation (FFT transform on the rhythm space) and have a different meaning than the sizes in the temporal dimension.

References:
  [1] E. Guaus and P. Herrera, "The rhythm transform: towards a generic
  rhythm description," in International Computer Music Conference (ICMC’05),
  2005.""" ;
    rdfs:comment "RhythmTransform Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Melbands ;
    afo:output essentia:Rhythm ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "256" ;
            afo:description "the frame size to compute the rhythm trasform" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "32" ;
            afo:description "the hop size to compute the rhythm transform" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ] .

essentia:RollOff a owl:Class ;
    rdfs:label "RollOff"@en ;
    rdfs:comment "the roll-off frequency [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RollOffExtractor ;
    afo:type essentia:real .

essentia:RollOffExtractor a owl:Class ;
    rdfs:label "RollOff Extractor"@en ;
    dc:description """This algorithm computes the roll-off frequency of a spectrum. The roll-off frequency is defined as the frequency under which some percentage (cutoff) of the total energy of the spectrum is contained. The roll-off frequency can be used to distinguish between harmonic (below roll-off) and noisy sounds (above roll-off).

An exception is thrown if the input audio spectrum is smaller than 2.
References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004""" ;
    rdfs:comment "RollOff Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:RollOff ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal (used to normalize rollOff) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.85" ;
            afo:description "the ratio of total energy to attain before yielding the roll-off frequency" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "cutoff" ;
            afo:type xsd:float ] .

essentia:SBicExtractor a owl:Class ;
    rdfs:label "SBic Extractor"@en ;
    dc:description """This descriptor segments the audio file into homogeneous portions using the Bayesian Information Criterion. The algorithm searches segments for which the feature vectors have the same probability distribution based on the implementation in [1]. The input matrix is assumed to have features along dim1 (horizontal) while frames along dim2 (vertical).

The segmentation is done in three phases: coarse segmentation, fine segmentation and segment validation. The first phase uses parameters 'size1' and 'inc1' to perform BIC segmentation. The second phase uses parameters 'size2' and 'inc2' to perform a local search for segmentation around the segmentation done by the first phase. Finally, the validation phase verifies that BIC differentials at segmentation points are positive as well as filters out any segments that are smaller than 'minLength'.

Because this algorithm takes as input feature vectors of frames, all units are in terms of frames. For example, if a 44100Hz audio signal is segmented as [0, 99, 199] with a frame size of 1024 and a hopsize of 512, this means, in the time domain, that the audio signal is segmented at [0s, 99*512/44100s, 199*512/44100s].

An exception is thrown if the input only contains one frame of features (i.e. second dimension is less than 2).

References:
  [1] Audioseg, http://audioseg.gforge.inria.fr

  [2] G. Gravier, M. Betser, and M. Ben, Audio Segmentation Toolkit,
  release 1.2, 2010. Available online:
  https://gforge.inria.fr/frs/download.php/25187/audioseg-1.2.pdf
""" ;
    rdfs:comment "SBic Extractor"@en ;
    rdfs:subClassOf essentia:SegmentationExtractors ;
    afo:input essentia:Features ;
    afo:output essentia:Segmentation ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "200" ;
            afo:description "second pass window size [frames]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "size2" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1.5" ;
            afo:description "complexity penalty weight" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "cpw" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "60" ;
            afo:description "first pass increment [frames]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "inc1" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "second pass increment [frames]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "inc2" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "300" ;
            afo:description "first pass window size [frames]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "size1" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "minimum length of a segment [frames]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "minLength" ;
            afo:type xsd:integer ] .

essentia:Saliencefunction a owl:Class ;
    rdfs:label "Saliencefunction"@en ;
    rdfs:comment "the array of salience function values corresponding to cent frequency bins"@en ;
    afo:type essentia:vector_real .

essentia:Scale a owl:Class ;
    rdfs:label "Scale"@en ;
    rdfs:comment "the scale of the whole song (major or minor)"@en ;
    afo:type essentia:string .

essentia:Segmentation a owl:Class ;
    rdfs:label "Segmentation"@en ;
    rdfs:comment "a list of frame indices that indicate where a segment of audio begins/ends (the indices of the first and last frame are also added to the list at the beginning and end, respectively)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SBicExtractor ;
    afo:type essentia:vector_real .

essentia:SegmentationExtractors a owl:Class ;
    rdfs:label "Segmentation Extractors"@en ;
    rdfs:comment "Essentia segmentation extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:SilenceRate a owl:Class ;
    rdfs:label "Silence Rate"@en ;
    rdfs:comment "silence rate"@en ;
    rdfs:subClassOf afo:AudioFeature .

essentia:SingleBeatLoudnessLoudnessbandratio a owl:Class ;
    rdfs:label "SingleBeatLoudnessLoudnessbandratio"@en ;
    rdfs:comment "the beat's energy ratio on each band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SingleBeatLoudnessExtractor ;
    afo:type essentia:vector_real .

essentia:SingleGaussianInversecovariance a owl:Class ;
    rdfs:label "SingleGaussianInversecovariance"@en ;
    rdfs:comment "the inverse of the covariance matrix"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SingleGaussianExtractor ;
    afo:type essentia:matrix_real .

essentia:Skewness a owl:Class ;
    rdfs:label "Skewness"@en ;
    rdfs:comment "the skewness of the distribution"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DistributionShapeExtractor ;
    afo:type essentia:real .

essentia:SpectralComplexity a owl:Class ;
    rdfs:label "SpectralComplexity"@en ;
    rdfs:comment "the spectral complexity of the input spectrum"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralComplexityExtractor ;
    afo:type essentia:real .

essentia:SpectralComplexityExtractor a owl:Class ;
    rdfs:label "SpectralComplexity Extractor"@en ;
    dc:description """This algorithm computes the spectral complexity of an spectrum of Reals. The spectral complexity is based on the number of peaks in the input spectrum.

It is recommended that the input "spectrum" be computed by the Spectrum algorithm. The input "spectrum" is passed to the SpectralPeaks algorithm and thus inherits its input requirements and exceptions.
References:
  [1] C. Laurier, O. Meyers, J. Serrà, M. Blech, P. Herrera, and X. Serra,
  "Indexing music by mood: design and integration of an automatic
  content-based annotator," Multimedia Tools and Applications, vol. 48,
  no. 1, pp. 161–184, 2009.
""" ;
    rdfs:comment "SpectralComplexity Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:SpectralComplexity ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.005" ;
            afo:description "the minimum spectral-peak magnitude that contributes to spectral complexity" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:float ] .

essentia:SpectralContrast a owl:Class ;
    rdfs:label "SpectralContrast"@en ;
    rdfs:comment "the spectral contrast coefficients"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralContrastExtractor ;
    afo:type essentia:vector_real .

essentia:SpectralPeaksFrequencies a owl:Class ;
    rdfs:label "SpectralPeaksFrequencies"@en ;
    rdfs:comment "the frequencies of the spectral peaks [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:SpectralPeaksMagnitudes a owl:Class ;
    rdfs:label "SpectralPeaksMagnitudes"@en ;
    rdfs:comment "the magnitudes of the spectral peaks"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralPeaksExtractor ;
    afo:type essentia:vector_real .

essentia:SpectralValley a owl:Class ;
    rdfs:label "SpectralValley"@en ;
    rdfs:comment "the magnitudes of the valleys"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralContrastExtractor ;
    afo:type essentia:vector_real .

essentia:SpectralWhiteningExtractor a owl:Class ;
    rdfs:label "SpectralWhitening Extractor"@en ;
    dc:description """Performs spectral whitening of spectral peaks of a given spectrum. The algorithm works in dB scale, but the conversion is done by the algorithm so input should be in linear scale. The concept of 'whitening' refers to 'white noise' or a non-zero flat spectrum. It first computes a spectral envelope similar to the 'true envelope' in [1], and then modifies the amplitude of each peak relative to the envelope. For example, the predominant peaks will have a value close to 0dB because they are very close to the envelope. On the other hand, minor peaks between significant peaks will have lower amplitudes such as -30dB.

The input "frequencies" and "magnitudes" can be computed using the SpectralPeaks algorithm.

An exception is thrown if the input frequency and magnitude input vectors are of different size.

References:
  [1] A. Röbel and X. Rodet, "Efficient spectral envelope estimation and its
  application to pitch shifting and envelope preservation," in International
  Conference on Digital Audio Effects (DAFx’05), 2005.""" ;
    rdfs:comment "SpectralWhitening Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes,
        essentia:Spectrum ;
    afo:output essentia:SpectralWhiteningMagnitudes ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "5000" ;
            afo:description "max frequency to apply whitening to [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:SpectralWhiteningMagnitudes a owl:Class ;
    rdfs:label "SpectralWhiteningMagnitudes"@en ;
    rdfs:comment "the whitened spectral peaks' linear magnitudes"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SpectralWhiteningExtractor ;
    afo:type essentia:vector_real .

essentia:SpectrumExtractor a owl:Class ;
    rdfs:label "Spectrum Extractor"@en ;
    dc:description """This algorithm calculates the magnitude spectrum of an array of Reals. The resulting magnitude spectrum has a size which is half the size of the input array plus one.

References:
  [1] Frequency spectrum - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Frequency_spectrum""" ;
    rdfs:comment "Spectrum Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Frame ;
    afo:output essentia:Spectrum ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the expected size of the input audio signal (this is an optional parameter to optimize memory allocation)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "size" ;
            afo:type xsd:integer ] .

essentia:Spectrumleft a owl:Class ;
    rdfs:label "Spectrumleft"@en ;
    rdfs:comment "Left channel's spectrum"@en ;
    afo:type essentia:vector_real .

essentia:Spectrumright a owl:Class ;
    rdfs:label "Spectrumright"@en ;
    rdfs:comment "Right channel's spectrum"@en ;
    afo:type essentia:vector_real .

essentia:Spread a owl:Class ;
    rdfs:label "Spread"@en ;
    rdfs:comment "the spread (variance) of the distribution"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DistributionShapeExtractor ;
    afo:type essentia:real .

essentia:StartStopSilenceStartframe a owl:Class ;
    rdfs:label "StartStopSilenceStartframe"@en ;
    rdfs:comment "number of the first non-silent frame"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:StartStopSilenceExtractor ;
    afo:type essentia:integer .

essentia:StartStopSilenceStopframe a owl:Class ;
    rdfs:label "StartStopSilenceStopframe"@en ;
    rdfs:comment "number of the last non-silent frame"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:StartStopSilenceExtractor ;
    afo:type essentia:integer .

essentia:StrongDecay a owl:Class ;
    rdfs:label "StrongDecay"@en ;
    rdfs:comment "the strong decay"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:StrongDecayExtractor ;
    afo:type essentia:real .

essentia:StrongDecayExtractor a owl:Class ;
    rdfs:label "StrongDecay Extractor"@en ;
    dc:description """This algorithm extracts the Strong Decay of an audio signal. The Strong Decay is built from the non-linear combination of the signal energy and the signal temporal centroid, the latter being the balance of the absolute value of the signal. A signal containing a temporal centroid near its start boundary and a strong energy is said to have a strong decay.

This algorithm is not defined for zero signals (i.e. silence) nor when the signal's size is less than two, as it could not compute its centroid.

References:
  [1] F. Gouyon and P. Herrera, "Exploration of techniques for automatic
  labeling of audio drum tracks instruments," in MOSART: Workshop on Current
  Directions in Computer Music, 2001.""" ;
    rdfs:comment "StrongDecay Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:StrongDecay ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:StrongPeak a owl:Class ;
    rdfs:label "StrongPeak"@en ;
    rdfs:comment "the Strong Peak ratio"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:StrongPeakExtractor ;
    afo:type essentia:real .

essentia:StrongPeakExtractor a owl:Class ;
    rdfs:label "StrongPeak Extractor"@en ;
    dc:description """This algorithm extracts the Strong Peak from an audio spectrum. The Strong Peak is defined as the ratio between the spectrum's maximum peak's magnitude and the "bandwidth" of the peak above a threshold (half its amplitude). This ratio reveals whether the spectrum presents a very "pronounced" maximum peak (i.e. the thinner and the higher the maximum of the spectrum is, the higher the ratio value).

Note that "bandwidth" is defined as the width of the peak in the log10-frequency domain. This is different than as implemented in [1]. Using the log10-frequency domain allows this algorithm to compare strong peaks at lower frequencies with those from higher frequencies.

An exception is thrown if the input spectrum contains less than two elements.

References:
  [1] F. Gouyon and P. Herrera, "Exploration of techniques for automatic
  labeling of audio drum tracks instruments,” in MOSART: Workshop on Current
  Directions in Computer Music, 2001.""" ;
    rdfs:comment "StrongPeak Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:StrongPeak .

essentia:SuperFluxExtractor a owl:Class ;
    rdfs:label "SuperFluxExtractor"@en ;
    dc:description """This algorithm extracts onsets from audio file following SuperFlux algorithm [1] adapted from python code available in [2]
                                                       [1] "Maximum Filter Vibrato Suppression for Onset Detection" by Sebastian Böck and Gerhard Widmer in Proceedings of the 16th International Conference on Digital Audio Effects (DAFx-13), Maynooth, Ireland, September 2013                                                       [2] https://github.com/CPJKU/SuperFlux/""" ;
    rdfs:comment "SuperFluxExtractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Onsets ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "256" ;
            afo:description "the hop size for computing low level features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.05" ;
            afo:description "threshold for peak peaking compared to the difference of novelty_signal and average_signal ,  for peaking onsets in ambien noise" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "threshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "16" ;
            afo:description "ratio threshold for peak-picking compared to novelty_signal/novelty_average, 0  disable it ,  for low energy onsets" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "ratioThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "time threshold for double onsets detections(ms)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "combine" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing low level features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ] .

essentia:SuperFluxNoveltyDifferences a owl:Class ;
    rdfs:label "SuperFluxNoveltyDifferences"@en ;
    rdfs:comment "SuperFluxNovelty input"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:SuperFluxNoveltyExtractor ;
    afo:type essentia:real .

essentia:SuperFluxNoveltyExtractor a owl:Class ;
    rdfs:label "SuperFluxNovelty Extractor"@en ;
    dc:description "Novelty curve from Superflux algorithm (see SuperFluxExtractor for references)" ;
    rdfs:comment "SuperFluxNovelty Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Bands ;
    afo:output essentia:SuperFluxNoveltyDifferences ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "2" ;
            afo:description "differenciate with the N-th previous frame" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameWidth" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "height(n of frequency bins) of the SuperFluxNoveltyFilter" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 3 ;
            afo:name "binWidth" ;
            afo:type xsd:integer ] .

essentia:SuperFluxPeaksExtractor a owl:Class ;
    rdfs:label "SuperFluxPeaks Extractor"@en ;
    dc:description "Peak peaking from Superflux algorithm (see SuperFluxExtractor for references)" ;
    rdfs:comment "SuperFluxPeaks Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Novelty ;
    afo:output essentia:Peaks ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "172" ;
            afo:description "frameRate" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "use N miliseconds past information for moving average" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pre_avg" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.05" ;
            afo:description "threshold for peak peaking compared to the difference of novelty_signal and average_signal ,  for peaking onsets in ambien noise" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "threshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "30" ;
            afo:description "ms for onset combination" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "combine" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "16" ;
            afo:description "ratio threshold for peak-picking compared to novelty_signal/novelty_average, 0  disable it ,  for low energy onsets" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "ratioThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "30" ;
            afo:description "use N miliseconds past information for moving maximum" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pre_max" ;
            afo:type xsd:float ] .

essentia:TCToTotal a owl:Class ;
    rdfs:label "TCToTotal"@en ;
    rdfs:comment "the temporal centroid to total length ratio"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TCToTotalExtractor ;
    afo:type essentia:real .

essentia:TCToTotalExtractor a owl:Class ;
    rdfs:label "TCToTotal Extractor"@en ;
    dc:description """This algorithm calculates the ratio of the temporal centroid to the total length of a signal envelope. This ratio shows how the sound is 'balanced'. Its value is close to 0 if most of the energy lies at the beginning of the sound (e.g. decrescendo or impulsive sounds), close to 0.5 if the sound is symetric (e.g. 'delta unvarying' sounds), and close to 1 if most of the energy lies at the end of the sound (e.g. crescendo sounds).

Please note that the TCToTotal ratio is not defined for a zero signal (a signal consisting of only zeros), nor it is defined for a signal of less than 2 elements.An exception is thrown if the given envelope's size is not larger than 1. And also if the integral of the input envelope is 0 (i.e. envelope is only zeros or if its sum is 0).

This algorithm is intended to be plugged after the Envelope algorithm""" ;
    rdfs:comment "TCToTotal Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Envelope ;
    afo:output essentia:TCToTotal .

essentia:TempoScaleBandsCumulativebands a owl:Class ;
    rdfs:label "TempoScaleBandsCumulativebands"@en ;
    rdfs:comment "cumulative sum of the output bands before scaling"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TempoScaleBandsExtractor ;
    afo:type essentia:real .

essentia:TempoScaleBandsScaledbands a owl:Class ;
    rdfs:label "TempoScaleBandsScaledbands"@en ;
    rdfs:comment "the output bands after scaling"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TempoScaleBandsExtractor ;
    afo:type essentia:vector_real .

essentia:TempoTapDegaraExtractor a owl:Class ;
    rdfs:label "TempoTapDegara Extractor"@en ;
    dc:description """This algorithm estimates beat positions given an onset detection function.  The detection function is partitioned into 6-second frames with a 1.5-second increment, and the autocorrelation is computed for each frame, and is weighted by a tempo preference curve [2]. Periodicity estimations are done frame-wisely, searching for the best match with the Viterbi algorith [3]. The estimated periods are then passed to the probabilistic beat tracking algorithm [1], which computes beat positions.

Note that the input values of the onset detection functions must be non-negative otherwise an exception is thrown. Parameter "maxTempo" should be 20bpm larger than "minTempo", otherwise an exception is thrown.

References:
  [1] Degara, N., Rua, E. A., Pena, A., Torres-Guijarro, S., Davies, M. E., & Plumbley, M. D. (2012). Reliability-informed beat tracking of musical signals. Audio, Speech, and Language Processing, IEEE Transactions on, 20(1), 290-301.
  [2] Davies, M. E., & Plumbley, M. D. (2007). Context-dependent beat tracking of musical audio. Audio, Speech, and Language Processing, IEEE Transactions on, 15(3), 1009-1020.
  [3] Stark, A. M., Davies, M. E., & Plumbley, M. D. (2009, September). Real-time beatsynchronous analysis of musical audio. In 12th International Conference on Digital Audio Effects (DAFx-09), Como, Italy.""" ;
    rdfs:comment "TempoTapDegara Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Onsetdetections ;
    afo:output essentia:Ticks ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "none" ;
            afo:description "use upsampling of the onset detection function (may increase accuracy)" ;
            afo:name "resample" ;
            afo:parameterValues "{none,x2,x3,x4}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "fastest tempo allowed to be detected [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "86.1328" ;
            afo:description "the sampling rate of the onset detection function [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRateODF" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "slowest tempo allowed to be detected [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ] .

essentia:TempoTapPeriods a owl:Class ;
    rdfs:label "TempoTapPeriods"@en ;
    rdfs:comment "list of tempo estimates found for each input feature, in frames"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TempoTapExtractor ;
    afo:type essentia:vector_real .

essentia:TempoTapPhases a owl:Class ;
    rdfs:label "TempoTapPhases"@en ;
    rdfs:comment "list of initial phase candidates found for each input feature, in frames"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TempoTapExtractor ;
    afo:type essentia:vector_real .

essentia:TempoTapTicksMatchingperiods a owl:Class ;
    rdfs:label "TempoTapTicksMatchingperiods"@en ;
    rdfs:comment "list of matching periods [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TempoTapTicksExtractor ;
    afo:type essentia:vector_real .

essentia:Tickcandidates a owl:Class ;
    rdfs:label "Tickcandidates"@en ;
    rdfs:comment "the tick candidates estimated using different beat trackers (or features) [s]"@en ;
    afo:type essentia:vector_vector_real .

essentia:TonicIndianArtMusicExtractor a owl:Class ;
    rdfs:label "TonicIndianArtMusic Extractor"@en ;
    dc:description """This algorithm estimates the tonic frequency of the lead artist in Indian art music. It uses multipitch representation of the audio signal (pitch salience) to compute a histogram using which the tonic is identified as one of its peak. The decision is made based on the distance between the prominent peaks, the classification is done using a decision tree.

References:
  [1] J. Salamon, S. Gulati, and X. Serra, "A Multipitch Approach to Tonic
  Identification in Indian Classical Music," in International Society for
  Music Information Retrieval Conference (ISMIR’12), 2012.""" ;
    rdfs:comment "TonicIndianArtMusic Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:IndianArtMusicTonic ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.85" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the minimum allowed tonic frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minTonicFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "512" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "375" ;
            afo:description "the maximum allowed tonic frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxTonicFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "5" ;
            afo:description " number of top peaks of the salience function which should be considered for constructing histogram" ;
            afo:maximumValue 15 ;
            afo:minimumValue 1 ;
            afo:name "numberSaliencePeaks" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing pitch saliecnce" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of considered hamonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ] .

essentia:TransformationExtractors a owl:Class ;
    rdfs:label "Transformation Extractors"@en ;
    rdfs:comment "Essentia transformation extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:TriangularBands a owl:Class ;
    rdfs:label "TriangularBands"@en ;
    rdfs:comment "the energy in each band"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TriangularBandsExtractor ;
    afo:type essentia:vector_real .

essentia:TriangularBandsExtractor a owl:Class ;
    rdfs:label "TriangularBands Extractor"@en ;
    dc:description """This algorithm computes the energy of an input spectrum for an arbitrary number of overlapping Triangular frequency bands. For each band the power-spectrum (mag-squared) is summed.

Parameter "TriangularBands" must contain at least 2 frequencies, they all must be positive and must be ordered ascentdantly, otherwise an exception will be thrown. TriangularBands is only defined for spectrum, which size is greater than 1.
""" ;
    rdfs:comment "TriangularBands Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:TriangularBands ;
    afo:parameter [ afo:defaultValue "[21.533203125, 43.06640625, 64.599609375, 86.1328125, 107.666015625, 129.19921875, 150.732421875, 172.265625, 193.798828125, 215.33203125, 236.865234375, 258.3984375, 279.931640625, 301.46484375, 322.998046875, 344.53125, 366.064453125, 387.59765625, 409.130859375, 430.6640625, 452.197265625, 473.73046875, 495.263671875, 516.796875, 538.330078125, 559.86328125, 581.396484375, 602.9296875, 624.462890625, 645.99609375, 667.529296875, 689.0625, 710.595703125, 732.12890625, 753.662109375, 775.1953125, 796.728515625, 839.794921875, 861.328125, 882.861328125, 904.39453125, 925.927734375, 968.994140625, 990.52734375, 1012.06054688, 1055.12695312, 1076.66015625, 1098.19335938, 1141.25976562, 1184.32617188, 1205.859375, 1248.92578125, 1270.45898438, 1313.52539062, 1356.59179688, 1399.65820312, 1442.72460938, 1485.79101562, 1528.85742188, 1571.92382812, 1614.99023438, 1658.05664062, 1701.12304688, 1765.72265625, 1808.7890625, 1873.38867188, 1916.45507812, 1981.0546875, 2024.12109375, 2088.72070312, 2153.3203125, 2217.91992188, 2282.51953125, 2347.11914062, 2411.71875, 2497.8515625, 2562.45117188, 2627.05078125, 2713.18359375, 2799.31640625, 2885.44921875, 2950.04882812, 3036.18164062, 3143.84765625, 3229.98046875, 3316.11328125, 3423.77929688, 3509.91210938, 3617.578125, 3725.24414062, 3832.91015625, 3940.57617188, 4069.77539062, 4177.44140625, 4306.640625, 4435.83984375, 4565.0390625, 4694.23828125, 4844.97070312, 4974.16992188, 5124.90234375, 5275.63476562, 5426.3671875, 5577.09960938, 5749.36523438, 5921.63085938, 6093.89648438, 6266.16210938, 6459.9609375, 6653.75976562, 6847.55859375, 7041.35742188, 7256.68945312, 7450.48828125, 7687.35351562, 7902.68554688, 8139.55078125, 8376.41601562, 8613.28125, 8871.6796875, 9130.078125, 9388.4765625, 9668.40820312, 9948.33984375, 10249.8046875, 10551.2695312, 10852.734375, 11175.7324219, 11498.7304688, 11843.2617188, 12187.7929688, 12553.8574219, 12919.921875, 13285.9863281, 13673.5839844, 14082.7148438, 14491.8457031, 14922.5097656, 15353.1738281, 15805.3710938, 16257.5683594]" ;
            afo:description "list of frequency ranges into which the spectrum is divided (these must be in ascending order and connot contain duplicates),each triangle is build as x(i-1)=, x(i)=1, x(i+1)=0 over i, the resulting number of bands is size of input array - 2" ;
            afo:name "frequencyBands" ;
            afo:type rdf:List ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "taking log10 (1 + magnitude) in each band" ;
            afo:name "log" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ] .

essentia:Tristimulus a owl:Class ;
    rdfs:label "Tristimulus"@en ;
    rdfs:comment "a three-element vector that measures the mixture of harmonics of the given spectrum"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TristimulusExtractor ;
    afo:type essentia:vector_real .

essentia:TristimulusExtractor a owl:Class ;
    rdfs:label "Tristimulus Extractor"@en ;
    dc:description """This algorithm calculates the tristimulus of a signal given its harmonic peaks. The tristimulus has been introduced as a timbre equivalent to the color attributes in the vision. The tristimulus is composed of three different types of energy ratio allowing for a fine-grained description of the first harmonic of the spectrum, which are perceptually more salient.

Tristimulus is intended to be fed by the output of the HarmonicPeaks algorithm. The algorithm throws an exception when the input frequencies are not in ascending order and/or if the input vectors are of different sizes.

References:
  [1] Tristimulus (audio) - Wikipedia, the free encyclopedia
  http://en.wikipedia.org/wiki/Tristimulus_(audio)

  [2] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004""" ;
    rdfs:comment "Tristimulus Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes ;
    afo:output essentia:Tristimulus .

essentia:TuningFrequency a owl:Class ;
    rdfs:label "TuningFrequency"@en ;
    rdfs:comment "the tuning frequency [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TuningFrequencyExtractor ;
    afo:type essentia:real .

essentia:TuningFrequencyExtractorTuningfrequency a owl:Class ;
    rdfs:label "TuningFrequencyExtractorTuningfrequency"@en ;
    rdfs:comment "the computed tuning frequency"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TuningFrequencyExtractor ;
    afo:type essentia:vector_real .

essentia:TuningFrequencyTuningcents a owl:Class ;
    rdfs:label "TuningFrequencyTuningcents"@en ;
    rdfs:comment "the deviation from 440 Hz (between -35 to 65 cents)"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:TuningFrequencyExtractor ;
    afo:type essentia:real .

essentia:Variance a owl:Class ;
    rdfs:label "Variance"@en ;
    essentia:annotation_key "var" ;
    rdfs:comment "the variance of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:VarianceExtractor ;
    afo:type essentia:real .

essentia:VarianceExtractor a owl:Class ;
    rdfs:label "Variance Extractor"@en ;
    dc:description "This algorithm calculates the variance of an array of Reals." ;
    rdfs:comment "Variance Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Array ;
    afo:output essentia:Variance .

essentia:VibratoVibratoextend a owl:Class ;
    rdfs:label "VibratoVibratoextend"@en ;
    rdfs:comment "estimated vibrato frquency [Hz]; zero if no vibrato was detected."@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:VibratoExtractor ;
    afo:type essentia:vector_real .

essentia:VibratoVibratofrequency a owl:Class ;
    rdfs:label "VibratoVibratofrequency"@en ;
    rdfs:comment "estimated vibrato frquency [Hz]; zero if no vibrato was detected."@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:VibratoExtractor ;
    afo:type essentia:vector_real .

essentia:Weights a owl:Class ;
    rdfs:label "Weights"@en ;
    rdfs:comment "the weighting coefficicients for each detection function, must be the same as the first dimension of \"detections\""@en ;
    afo:type essentia:vector_real .

essentia:ZeroCrossingRate a owl:Class ;
    rdfs:label "ZeroCrossingRate"@en ;
    rdfs:comment "zero crossing rate"@en ;
    rdfs:subClassOf afo:AudioFeature .

essentia:Bands a owl:Class ;
    rdfs:label "Bands"@en ;
    rdfs:comment "the input bands spectrogram"@en ;
    afo:type essentia:vector_vector_real .

essentia:BeatTrackerMultiFeatureExtractor a owl:Class ;
    rdfs:label "BeatTrackerMultiFeature Extractor"@en ;
    dc:description """This algorithm estimates the beat locations given an input signal. It computes a number of onset detection functions and estimates beat location candidates from them using TempoTapDegara algorithm. Thereafter the best candidates are selected using TempoTapMaxAgreement. The employed detection functions, and the optimal frame/hop sizes used for their computation are:
  - complex spectral difference (see 'complex' method in OnsetDetection algorithm, 2048/1024 with posterior x2 upsample or the detection function)
  - energy flux (see 'rms' method in OnsetDetection algorithm, the same settings)
  - spectral flux in Mel-frequency bands (see 'melflux' method in OnsetDetection algorithm, the same settings)
  - beat emphasis function (see 'beat_emphasis' method in OnsetDetectionGlobal algorithm, 2048/512)
  - spectral flux between histogrammed spectrum frames, measured by the modified information gain (see 'infogain' method in OnsetDetectionGlobal algorithm, 2048/512)

You can follow these guidelines [2] to assess the quality of beats estimation based on the computed confidence value:
  - [0, 1)      very low confidence, the input signal is hard for the employed candidate beat trackers
  - [1, 1.5]    low confidence
  - (1.5, 3.5]  good confidence, accuracy around 80% in AMLt measure
  - (3.5, 5.32] excellent confidence

Note that the algorithm requires the audio input with the 44100 Hz sampling rate in order to function correctly.

References:
  [1] J. Zapata, M. Davies and E. Gómez, "Multi-feature beat tracker,"
  IEEE/ACM Transactions on Audio, Speech and Language Processing. 22(4),
  816-825, 2014

  [2] J.R. Zapata, A. Holzapfel, M.E.P. Davies, J.L. Oliveira, F. Gouyon,
  "Assigning a confidence threshold on automatic beat annotation in large
  datasets", International Society for Music Information Retrieval Conference
  (ISMIR'12), pp. 157-162, 2012
""" ;
    rdfs:comment "BeatTrackerMultiFeature Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Confidence,
        essentia:Ticks ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "the fastest tempo to detect [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the slowest tempo to detect [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ] .

essentia:Beatogram a owl:Class ;
    rdfs:label "Beatogram"@en ;
    rdfs:comment "filtered matrix loudness"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BeatogramExtractor ;
    afo:type essentia:vector_vector_real .

essentia:BeatsLoudnessExtractor a owl:Class ;
    rdfs:label "BeatsLoudness Extractor"@en ;
    dc:description """Calculates the loudness computed only on the beats, both on the whole frequency range and on each specified frequency band. See the Loudness algorithm for a description of loudness and SingleBeatLoudness for a more detailed explanation.

Note that the algorithm will output empty results in the case if no beats are specified in the "beats" parameter.""" ;
    rdfs:comment "BeatsLoudness Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:BeatsLoudness,
        essentia:BeatsLoudnessBandRatio ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.05" ;
            afo:description "the duration of the window in which the beat will be restricted [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "beatDuration" ;
            afo:type xsd:float ],
        [ afo:defaultValue "[]" ;
            afo:description "the list of beat positions (each position is in seconds)" ;
            afo:name "beats" ;
            afo:type rdf:List ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "the duration of the window in which to look for the beginning of the beat (centered around the positions in 'beats') [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "beatWindowDuration" ;
            afo:type xsd:float ],
        [ afo:defaultValue "[20, 150, 400, 3200, 7000, 22000]" ;
            afo:description "the list of bands to compute energy ratios [Hz" ;
            afo:name "frequencyBands" ;
            afo:type rdf:List ] .

essentia:Chords a owl:Class ;
    rdfs:label "Chords"@en ;
    rdfs:comment "the chord progression"@en ;
    afo:computed_by essentia:ChordsDetectionExtractor ;
    afo:type essentia:vector_string .

essentia:ChordsDetectionBeatsExtractor a owl:Class ;
    rdfs:label "ChordsDetectionBeats Extractor"@en ;
    dc:description """This algorithm estimates chords using pitch profile classes similar to ChordsDetection algorithm given a list of beat positions. The chords are estimated on audio segments between each pair of consecutive beats.

Quality: experimental (algorithm needs evaluation)

References:
  [1] E. Gómez, "Tonal Description of Polyphonic Audio for Music Content
  Processing," INFORMS Journal on Computing, vol. 18, no. 3, pp. 294–304,
  2006.

  [2] D. Temperley, "What's key for key? The Krumhansl-Schmuckler
  key-finding algorithm reconsidered", Music Perception vol. 17, no. 1,
  pp. 65-100, 1999.""" ;
    rdfs:comment "ChordsDetectionBeats Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:PCP,
        essentia:Ticks ;
    afo:output essentia:BeatsChords,
        essentia:BeatsChordsStrength ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the hop size with which the input PCPs were computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ] .

essentia:ChordsDetectionExtractor a owl:Class ;
    rdfs:label "ChordsDetection Extractor"@en ;
    dc:description """Using pitch profile classes, this algorithm calculates the best matching major or minor triad and outputs the result as a string (e.g. A#, Bm, G#m, C). This algorithm uses the Sharp versions of each Flatted note (i.e. Bb -> A#).

Note:
  - This algorithm assumes that input pcps have been computed with framesize = 2*hopsize

Quality: experimental (prone to errors, algorithm needs improvement)

References:
  [1] E. Gómez, "Tonal Description of Polyphonic Audio for Music Content
  Processing," INFORMS Journal on Computing, vol. 18, no. 3, pp. 294–304,
  2006.

  [2] D. Temperley, "What's key for key? The Krumhansl-Schmuckler
  key-finding algorithm reconsidered", Music Perception vol. 17, no. 1,
  pp. 65-100, 1999.""" ;
    rdfs:comment "ChordsDetection Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:PCP ;
    afo:output essentia:Chords,
        essentia:ChordsStrength ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the hop size with which the input PCPs were computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2" ;
            afo:description "the size of the window on which to estimate the chords [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "windowSize" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:DerivativeSFXExtractor a owl:Class ;
    rdfs:label "DerivativeSFX Extractor"@en ;
    dc:description """This algorithm returns two descriptors that are based on the derivative of a signal envelope.

The first descriptor is calculated after the maximum value of the input signal occurred. It is the average of the signal's derivative weighted by its amplitude. This coefficient helps discriminating impulsive sounds, which have a steep release phase, from non-impulsive sounds. The smaller the value the more impulsive.

The second descriptor is the maximum derivative, before the maximum value of the input signal occurred. This coefficient helps discriminating sounds that have a smooth attack phase, and therefore a smaller value than sounds with a fast attack.

This algorithm is meant to be fed by the outputs of the Envelope algorithm. If used in streaming mode, RealAccumulator should be connected in between.
An exception is thrown if the input signal is empty.""" ;
    rdfs:comment "DerivativeSFX Extractor"@en ;
    rdfs:subClassOf essentia:Envelope_SFXExtractors ;
    afo:input essentia:Envelope ;
    afo:output essentia:DerivativeSFXDeravaftermax,
        essentia:DerivativeSFXMaxderbeforemax .

essentia:DynamicComplexityExtractor a owl:Class ;
    rdfs:label "DynamicComplexity Extractor"@en ;
    dc:description """The dynamic complexity is the average absolute deviation from the global
loudness level estimate on the dB scale. It is related to the dynamic
range and to the amount of fluctuation in loudness present in a recording.

Silence at the beginning and at the end of a track are ignored in the
computation in order not to deteriorate the results.

References:
  [1] S. Streich, Music complexity: a multi-faceted description of audio
  content, UPF, Barcelona, Spain, 2007.""" ;
    rdfs:comment "DynamicComplexity Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:DynamicComplexity,
        essentia:DynamicComplexityLoudness ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "the frame size [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:Estimates a owl:Class ;
    rdfs:label "Estimates"@en ;
    rdfs:comment "the bpm estimation per frame [bpm]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:RhythmExtractor,
        essentia:RhythmExtractor2013 ;
    afo:type essentia:vector_real .

essentia:FadeDetectionExtractor a owl:Class ;
    rdfs:label "FadeDetection Extractor"@en ;
    dc:description """This algorithm computes two arrays containing the start/stop points of fade-ins and fade-outs detected in an audio file. The main hypothesis for the detection is that an increase or decrease of the RMS over time in an audio file corresponds to a fade-in or fade-out, repectively. Minimum and maximum mean-RMS-thresholds are used to define where fade-in and fade-outs occur.

An exception is thrown if the input "rms" is empty.

References:
  [1] Fade (audio engineering) - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Fade-in""" ;
    rdfs:comment "FadeDetection Extractor"@en ;
    rdfs:subClassOf essentia:Duration_silenceExtractors ;
    afo:input essentia:RMS ;
    afo:output essentia:FadeDetectionFadein,
        essentia:FadeDetectionFadeout ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.85" ;
            afo:description "fraction of the average RMS to define the maximum threshold" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "cutoffHigh" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "the minimum length to consider a fade-in/out [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minLength" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "fraction of the average RMS to define the minimum threshold" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "cutoffLow" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "4" ;
            afo:description "the rate of frames used in calculation of the RMS [frames/s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameRate" ;
            afo:type xsd:float ] .

essentia:FirstPeakBPM a owl:Class ;
    rdfs:label "FirstPeakBPM"@en ;
    rdfs:comment "value for the highest peak [bpm]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:FirstPeakSpread a owl:Class ;
    rdfs:label "FirstPeakSpread"@en ;
    rdfs:comment "spread of the highest peak"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:FirstPeakWeight a owl:Class ;
    rdfs:label "FirstPeakWeight"@en ;
    rdfs:comment "weight of the highest peak"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:GFCCExtractor a owl:Class ;
    rdfs:label "GFCC Extractor"@en ;
    dc:description """This algorithm computes the equivalent of MFCCs but using a gammatone filterbank (ERBBands) scaled on an Equivalent Rectangular Bandwidth (ERB) scale. These coefficients could be called 'Gammatone Feature Cepstral Coefficients.

References:
  [1] Y. Shao, Z. Jin, D. Wang, and S. Srinivasan, "An auditory-based feature
  for robust speech recognition," in IEEE International Conference on
  Acoustics, Speech, and Signal Processing (ICASSP’09), 2009,
  pp. 4625-4628.""" ;
    rdfs:comment "GFCC Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:GFCC,
        essentia:GFCCBands ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "the upper bound of the frequency range [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the number of bands in the filter" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "13" ;
            afo:description "the number of output cepstrum coefficients" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberCoefficients" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the lower bound of the frequency range [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowFrequencyBound" ;
            afo:type xsd:float ] .

essentia:HPCP a owl:Class ;
    rdfs:label "HPCP"@en ;
    rdfs:comment "the resulting harmonic pitch class profile"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:HPCPExtractor ;
    afo:type essentia:vector_real .

essentia:HarmonicPeaksExtractor a owl:Class ;
    rdfs:label "HarmonicPeaks Extractor"@en ;
    dc:description """This algorithm finds the harmonic peaks of a signal given its spectral peaks and its fundamental frequency.
Note:
  - "tolerance" parameter defines the allowed fixed deviation from ideal harmonics, being a percentage over the F0. For example: if the F0 is 100Hz you may decide to allow a deviation of 20%, that is a fixed deviation of 20Hz; for the harmonic series it is: [180-220], [280-320], [380-420], etc.
  - If "pitch" is zero, it means its value is unknown, or the sound is unpitched, and in that case the HarmonicPeaks algorithm returns an empty vector.
  - The output frequency and magnitude vectors are of size "maxHarmonics". If a particular harmonic was not found among spectral peaks, its ideal frequency value is output together with 0 magnitude.
This algorithm is intended to receive its "frequencies" and "magnitudes" inputs from the SpectralPeaks algorithm.
  - When input vectors differ in size or are empty, an exception is thrown. Input vectors must be ordered by ascending frequency excluding DC components and not contain duplicates, otherwise an exception is thrown.

References:
  [1] Harmonic Spectrum - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Harmonic_spectrum""" ;
    rdfs:comment "HarmonicPeaks Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes,
        essentia:Pitch ;
    afo:output essentia:HarmonicPeaksHarmonicfrequencies,
        essentia:HarmonicPeaksHarmonicmagnitudes ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "the number of harmonics to return including F0" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "maxHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "the allowed ratio deviation from ideal harmonics" ;
            afo:maximumValue 5e-01 ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ] .

essentia:Key a owl:Class ;
    rdfs:label "Key"@en ;
    rdfs:comment "the key of the whole song, from A to G"@en ;
    afo:computed_by essentia:KeyExtractor ;
    afo:type essentia:string .

essentia:LPCExtractor a owl:Class ;
    rdfs:label "LPC Extractor"@en ;
    dc:description """This algorithm computes the Linear Predictive Coefficients of a signal and the associated Reflection coefficients.

An exception is thrown if the "order" provided is larger than the size of the input signal.

References:
  [1] Linear predictive coding - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Linear_predictive_coding

  [2] J. Makhoul, "Spectral analysis of speech by linear prediction," IEEE
  Transactions on Audio and Electroacoustics, vol. 21, no. 3, pp. 140–148,
  1973.
""" ;
    rdfs:comment "LPC Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Frame ;
    afo:output essentia:LPC,
        essentia:LPCReflection ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "the order of the LPC analysis (typically [8,14])" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 2 ;
            afo:name "order" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "regular" ;
            afo:description "the type of LPC (regular or warped)" ;
            afo:name "type" ;
            afo:parameterValues "{regular,warped}" ;
            afo:type xsd:string ] .

essentia:MFCCExtractor a owl:Class ;
    rdfs:label "MFCC Extractor"@en ;
    dc:description """This algorithm computes the mel-frequency cepstrum coefficients.
As there is no standard implementation, the MFCC-FB40 is used by default:
  - filterbank of 40 bands from 0 to 11000Hz
  - take the log value of the spectrum energy in each mel band
  - DCT of the 40 bands down to 13 mel coefficients
There is a paper describing various MFCC implementations [1].

This algorithm depends on the algorithms MelBands and DCT and therefore inherits their parameter restrictions. An exception is thrown if any of these restrictions are not met. The input "spectrum" is passed to the MelBands algorithm and thus imposes MelBands' input requirements. Exceptions are inherited by MelBands as well as by DCT.

References:
  [1] T. Ganchev, N. Fakotakis, and G. Kokkinakis, "Comparative evaluation
  of various MFCC implementations on the speaker verification task," in
  International Conference on Speach and Computer (SPECOM’05), 2005, vol. 1,
  pp. 191–194.

  [2] Mel-frequency cepstrum - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Mel_frequency_cepstral_coefficient""" ;
    rdfs:comment "MFCC Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:MFCC,
        essentia:MFCCBands ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "13" ;
            afo:description "the number of output mel coefficients" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberCoefficients" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the number of mel-bands in the filter" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "11000" ;
            afo:description "the upper bound of the frequency range [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1025" ;
            afo:description "the size of input spectrum" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "inputSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "the lower bound of the frequency range [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowFrequencyBound" ;
            afo:type xsd:float ] .

essentia:Mean a owl:Class ;
    rdfs:label "Mean"@en ;
    essentia:annotation_key "mean" ;
    rdfs:comment "the mean of the input array"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MeanExtractor,
        essentia:SingleGaussianExtractor ;
    afo:type essentia:real .

essentia:MultiPitch a owl:Class ;
    rdfs:label "MultiPitch"@en ;
    rdfs:comment "the estimated pitch values [Hz]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:MultiPitchKlapuriExtractor,
        essentia:MultiPitchMelodiaExtractor ;
    afo:type essentia:vector_vector_real .

essentia:Novelty a owl:Class ;
    rdfs:label "Novelty"@en ;
    rdfs:comment "the novelty curve of the audio signal"@en ;
    afo:type essentia:vector_real .

essentia:NoveltyCurveFixedBpmEstimatorExtractor a owl:Class ;
    rdfs:label "NoveltyCurveFixedBpmEstimator Extractor"@en ;
    dc:description """Given the novelty curve (see NoveltyCurve algorithm), this algorithm outputs a histogram of the most probable bpms assuming the signal has constant tempo.This algorithm is based on the autocorrelation of the novelty curve and should only be used for signals that have a constant tempo or as a first tempo estimator to be used  in conjunction with other algorithms such as BpmHistogram.It is a simplified version of the algorithm described in [1] as, in order to predict the best BPM candidate,  it computes autocorrelation of the entire novelty curve instead of analyzing it on frames and histogramming the peaks over frames.

References:
  [1] E. Aylon and N. Wack, "Beat detection using plp," in Music Information
  Retrieval Evaluation Exchange (MIREX’10), 2010.
""" ;
    rdfs:comment "NoveltyCurveFixedBpmEstimator Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Novelty ;
    afo:output essentia:Amplitudes,
        essentia:BPM ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "560" ;
            afo:description "the maximum bpm to look for" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxBpm" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "30" ;
            afo:description "the minimum bpm to look for" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minBpm" ;
            afo:type xsd:float ],
        [ afo:defaultValue "512" ;
            afo:description "the hopSize used to computeh the novelty curve from the original signal" ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate original audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "tolerance (in percentage) for considering bpms to be equal" ;
            afo:maximumValue 100 ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ] .

essentia:OnsetRateExtractor a owl:Class ;
    rdfs:label "OnsetRate Extractor"@en ;
    dc:description """Given an audio signal, this algorithm outputs the rate at which onsets occur and the onsets' position in time. Onset detection functions are computed using both high frequency content and complex-domain methods available in OnsetDetection algorithm. See OnsetDetection for more information.
Please note that due to a dependence on the Onsets algorithm, this algorithm is only valid for audio signals with a sampling rate of 44100Hz.
This algorithm throws an exception if the input signal is empty.""" ;
    rdfs:comment "OnsetRate Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:OnsetRate,
        essentia:Onsets .

essentia:PitchContoursMelodyExtractor a owl:Class ;
    rdfs:label "PitchContoursMelody Extractor"@en ;
    dc:description """This algorithm converts a set of pitch contours into a sequence of predominant f0 values in Hz by taking the value of the most predominant contour in each frame.
This algorithm is intended to receive its "contoursBins", "contoursSaliences", and "contoursStartTimes" inputs from the PitchContours algorithm. The "duration" input corresponds to the time duration of the input signal. The output is a vector of estimated pitch values and a vector of confidence values.

Note that "pitchConfidence" can be negative in the case of "guessUnvoiced"=True: the absolute values represent the confidence, negative values correspond to segments for which non-salient contours where selected, zero values correspond to non-voiced segments.

When input vectors differ in size, or "numberFrames" is negative, an exception is thrown. Input vectors must not contain negative start indices nor negative bin and salience values otherwise an exception is thrown.

Recommended processing chain: (see [1]): EqualLoudness -> frame slicing with sample rate = 44100, frame size = 2048, hop size = 128 -> Windowing with Hann, x4 zero padding -> Spectrum -> SpectralPeaks -> PitchSalienceFunction -> PitchSalienceFunctionPeaks -> PitchContours.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.
""" ;
    rdfs:comment "PitchContoursMelody Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Contoursbins,
        essentia:Contourssaliences,
        essentia:Contoursstarttimes,
        essentia:Duration ;
    afo:output essentia:Pitch,
        essentia:PitchContoursMelodyPitchconfidence ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "allowed deviation below the average contour mean salience of all contours (fraction of the standard deviation)" ;
            afo:maximumValue 1.4e+00 ;
            afo:minimumValue 1e+00 ;
            afo:name "voicingTolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "80" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of interations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "detect voice vibrato" ;
            afo:name "voiceVibrato" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "Estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal (Hz)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ] .

essentia:PitchContoursMonoMelodyExtractor a owl:Class ;
    rdfs:label "PitchContoursMonoMelody Extractor"@en ;
    dc:description """This algorithm converts a set of pitch contours into a sequence of f0 values in Hz by taking the value of the most salient contour in each frame.
In contrast to pitchContoursMelody, it assumes a single source. 
This algorithm is intended to receive its "contoursBins", "contoursSaliences", and "contoursStartTimes" inputs from the PitchContours algorithm. The "duration" input corresponds to the time duration of the input signal. The output is a vector of estimated pitch values and a vector of confidence values.

Note that "pitchConfidence" can be negative in the case of "guessUnvoiced"=True: the absolute values represent the confidence, negative values correspond to segments for which non-salient contours where selected, zero values correspond to non-voiced segments.

When input vectors differ in size, or "numberFrames" is negative, an exception is thrown. Input vectors must not contain negative start indices nor negative bin and salience values otherwise an exception is thrown.

Recommended processing chain: (see [1]): EqualLoudness -> frame slicing with sample rate = 44100, frame size = 2048, hop size = 128 -> Windowing with Hann, x4 zero padding -> Spectrum -> SpectralPeaks -> PitchSalienceFunction -> PitchSalienceFunctionPeaks -> PitchContours.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.
""" ;
    rdfs:comment "PitchContoursMonoMelody Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Contoursbins,
        essentia:Contourssaliences,
        essentia:Contoursstarttimes,
        essentia:Duration ;
    afo:output essentia:Pitch,
        essentia:PitchContoursMonoMelodyPitchconfidence ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "Estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal (Hz)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of interations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "80" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ] .

essentia:PitchMelodiaExtractor a owl:Class ;
    rdfs:label "PitchMelodia Extractor"@en ;
    dc:description """This algorithm estimates the fundamental frequency corresponding to the melody of a monophonic music signal (i.e. solo violin, solo singing voice). It implements the MELODIA algorithm described in [1]. While the algorithm is originally designed to extract the predominant melody from polyphonic music, this implementation is adapted for monophonic signals. The approach is based on the creation and characterization of pitch contours, time continuous sequences of pitch candidates grouped using auditory streaming cues. To this end, PitchSalienceFunction, PitchSalienceFunctionPeaks, PitchContours, and PitchContoursMonoMelody algorithms are employed. It is strongly advised to use the default parameter values which are optimized according to [1] (where further details are provided) except for minFrequency and maxFrequency, which will depend on your application.

The output is a vector of estimated melody pitch values and a vector of confidence values.

It is recommended to apply EqualLoudness on the input signal (see [1]) as a pre-processing stage before running this algorithm.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.

  [2] http://mtg.upf.edu/technologies/melodia

  [3] http://www.justinsalamon.com/melody-extraction
""" ;
    rdfs:comment "PitchMelodia Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Pitch,
        essentia:PitchMelodiaPitchconfidence ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "per-frame salience threshold factor (fraction of the highest peak salience in a frame)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "peakFrameThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "allowed deviation below the peak salience mean over all frames (fraction of the standard deviation)" ;
            afo:maximumValue 2 ;
            afo:minimumValue 0 ;
            afo:name "peakDistributionThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "27.5625" ;
            afo:description "pitch continuity cue (maximum allowed pitch change during 1 ms time period) [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pitchContinuity" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of considered harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing pitch saliecnce" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "spectral peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter for the salience function (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of iterations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the minimum allowed contour duration [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minDuration" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.8" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "time continuity cue (the maximum allowed gap duration for a pitch contour) [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "timeContinuity" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ] .

essentia:PitchSalienceFunctionPeaksExtractor a owl:Class ;
    rdfs:label "PitchSalienceFunctionPeaks Extractor"@en ;
    dc:description """This algorithm computes the peaks of a given pitch salience function.

This algorithm is intended to receive its "salienceFunction" input from the PitchSalienceFunction algorithm. The peaks are detected using PeakDetection algorithm. The outputs are two arrays of bin numbers and salience values corresponding to the peaks.

References:
  [1] Salamon, J., & Gómez E. (2012).  Melody Extraction from Polyphonic Music Signals using Pitch Contour Characteristics.
      IEEE Transactions on Audio, Speech and Language Processing. 20(6), 1759-1770.
""" ;
    rdfs:comment "PitchSalienceFunctionPeaks Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Saliencefunction ;
    afo:output essentia:PitchSalienceFunctionPeaksSaliencebins,
        essentia:PitchSalienceFunctionPeaksSaliencevalues ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the minimum frequency to evaluate (ignore peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1760" ;
            afo:description "the maximum frequency to evaluate (ignore peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ] .

essentia:PitchYinExtractor a owl:Class ;
    rdfs:label "PitchYin Extractor"@en ;
    dc:description """This algorithm estimates the fundamental frequency from a given spectrum. It is an implementation of the Yin algorithm [1] for computations in the time domain.

An exception is thrown if an empty signal is provided.

Please note that if "pitchConfidence" is zero, "pitch" is undefined and should not be used for other algorithms.
Also note that a null "pitch" is never ouput by the algorithm and that "pitchConfidence" must always be checked out.

References:
  [1] De Cheveigné, A., & Kawahara, H. "YIN, a fundamental frequency estimator
  for speech and music. The Journal of the Acoustical Society of America,
  111(4), 1917-1930, 2002.

  [2] Pitch detection algorithm - Wikipedia, the free encyclopedia
  http://en.wikipedia.org/wiki/Pitch_detection_algorithm""" ;
    rdfs:comment "PitchYin Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Pitch,
        essentia:PitchYinPitchconfidence ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "number of samples in the input frame" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 2 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "sampling rate of the input spectrum [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.15" ;
            afo:description "tolerance for peak detection" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "the maximum allowed frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "the minimum allowed frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "enable interpolation" ;
            afo:name "interpolate" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ] .

essentia:PitchYinFFTExtractor a owl:Class ;
    rdfs:label "PitchYinFFT Extractor"@en ;
    dc:description """This algorithm estimates the fundamental frequency corresponding to the melody of a monophonic music signal (i.e. solo violin or solo singing voice). It is an implementation of YinFFT algorithm [1], which is an optimized version of Yin algorithm for computation in the frequency domain. It is recommended to window the input spectrum with a Hann window. The raw spectrum can be computed with the Spectrum algorithm.

An exception is thrown if an empty spectrum is provided.

Please note that if "pitchConfidence" is zero, "pitch" is undefined and should not be used for other algorithms.
Also note that a null "pitch" is never ouput by the algorithm and that "pitchConfidence" must always be checked out.

References:
  [1] P. M. Brossier, "Automatic Annotation of Musical Audio for Interactive
  Applications,” QMUL, London, UK, 2007.

  [2] Pitch detection algorithm - Wikipedia, the free encyclopedia
  http://en.wikipedia.org/wiki/Pitch_detection_algorithm""" ;
    rdfs:comment "PitchYinFFT Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:Pitch,
        essentia:PitchYinFFTPitchconfidence ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "boolean flag to enable interpolation" ;
            afo:name "interpolate" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "sampling rate of the input spectrum [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "the maximum allowed frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "number of samples in the input spectrum" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 2 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "the minimum allowed frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ] .

essentia:PredominantPitchMelodiaExtractor a owl:Class ;
    rdfs:label "PredominantPitchMelodia Extractor"@en ;
    dc:description """This algorithm estimates the fundamental frequency of the predominant melody from polyphonic music signals (i.e. the singing voice melody in an accompanied singing recording). It implements the MELODIA algorithm described in [1]. The approach is based on the creation and characterization of pitch contours, time continuous sequences of pitch candidates grouped using auditory streaming cues. It furthermore determines for each frame, if the predominant melody is present or not. To this end, PitchSalienceFunction, PitchSalienceFunctionPeaks, PitchContours, and PitchContoursMelody algorithms are employed. It is strongly advised to use the default parameter values which are optimized according to [1] (where further details are provided) except for minFrequency, maxFrequency, and voicingTolerance, which will depend on your application.

The output is a vector of estimated melody pitch values and a vector of confidence values. The first value corresponds to the beginning of the input signal (time 0).

It is recommended to apply EqualLoudness on the input signal (see [1]) as a pre-processing stage before running this algorithm.

Note that "pitchConfidence" can be negative in the case of "guessUnvoiced"=True: the absolute values represent the confidence, negative values correspond to segments for which non-salient contours where selected, zero values correspond to non-voiced segments.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.

  [2] http://mtg.upf.edu/technologies/melodia

  [3] http://www.justinsalamon.com/melody-extraction
""" ;
    rdfs:comment "PredominantPitchMelodia Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:Pitch,
        essentia:PredominantPitchMelodiaPitchconfidence ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "3" ;
            afo:description "number of iterations for the octave errors / pitch outlier filtering process" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "filterIterations" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "55" ;
            afo:description "the reference frequency for Hertz to cent convertion [Hz], corresponding to the 0th cent bin" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "referenceFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "spectral peak magnitude threshold (maximum allowed difference from the highest peak in dBs)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "80" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks below) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "allowed deviation below the peak salience mean over all frames (fraction of the standard deviation)" ;
            afo:maximumValue 2 ;
            afo:minimumValue 0 ;
            afo:name "peakDistributionThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20000" ;
            afo:description "the minimum allowed frequency for salience function peaks (ignore contours with peaks above) [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.2" ;
            afo:description "allowed deviation below the average contour mean salience of all contours (fraction of the standard deviation)" ;
            afo:maximumValue 1.4e+00 ;
            afo:minimumValue 1e+00 ;
            afo:name "voicingTolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the frame size for computing pitch saliecnce" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "detect voice vibrato" ;
            afo:name "voiceVibrato" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "number of considered harmonics" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numberHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "magnitude compression parameter for the salience function (=0 for maximum compression, =1 for no compression)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "magnitudeCompression" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the minimum allowed contour duration [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minDuration" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "27.5625" ;
            afo:description "pitch continuity cue (maximum allowed pitch change during 1 ms time period) [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pitchContinuity" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "false" ;
            afo:description "estimate pitch for non-voiced segments by using non-salient contours when no salient ones are present in a frame" ;
            afo:name "guessUnvoiced" ;
            afo:parameterValues "{false,true}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.8" ;
            afo:description "harmonic weighting parameter (weight decay ratio between two consequent harmonics, =1 for no decay)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "harmonicWeight" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "per-frame salience threshold factor (fraction of the highest peak salience in a frame)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "peakFrameThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "time continuity cue (the maximum allowed gap duration for a pitch contour) [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "timeContinuity" ;
            afo:type xsd:integer ] .

essentia:RMS a owl:Class ;
    rdfs:label "RMS"@en ;
    rdfs:comment "rms values array"@en ;
    afo:computed_by essentia:RMSExtractor ;
    afo:type essentia:vector_real .

essentia:SecondPeakBPM a owl:Class ;
    rdfs:label "SecondPeakBPM"@en ;
    rdfs:comment "value for the second highest peak [bpm]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:SecondPeakSpread a owl:Class ;
    rdfs:label "SecondPeakSpread"@en ;
    rdfs:comment "spread of the second highest peak"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:SecondPeakWeight a owl:Class ;
    rdfs:label "SecondPeakWeight"@en ;
    rdfs:comment "weight of the second highest peak"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BpmHistogramDescriptorsExtractor,
        essentia:RhythmDescriptorsExtractor ;
    afo:type essentia:real .

essentia:SingleBeatLoudnessExtractor a owl:Class ;
    rdfs:label "SingleBeatLoudness Extractor"@en ;
    dc:description """This algorithm computes the loudness of a single beat, on the whole frequency range and on each specified frequency band (bands by default: 0-200 Hz, 200-400 Hz, 400-800 Hz, 800-1600 Hz, 1600-3200 Hz, 3200-22000Hz, following E. Scheirer [1]). See the Loudness algorithm for a description of loudness.

This algorithm throws an exception either when parameter beatDuration is larger than beatWindowSize or when the size of the input beat is less than beatWindowSize plus beatDuration.

References:
  [1] E. D. Scheirer, "Tempo and beat analysis of acoustic musical signals,"
  The Journal of the Acoustical Society of America, vol. 103, p. 588, 1998.
""" ;
    rdfs:comment "SingleBeatLoudness Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Beat ;
    afo:output essentia:Loudness,
        essentia:SingleBeatLoudnessLoudnessbandratio ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "the size of the window in which to look for the beginning of the beat [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "beatWindowDuration" ;
            afo:type xsd:float ],
        [ afo:defaultValue "[0, 200, 400, 800, 1600, 3200, 22000]" ;
            afo:description "the bands" ;
            afo:name "frequencyBands" ;
            afo:type rdf:List ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.05" ;
            afo:description "the size of the window in which the beat will be restricted [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "beatDuration" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the audio sampling rate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "sumEnergy" ;
            afo:description "criteria for finding the start of the beat" ;
            afo:name "onsetStart" ;
            afo:parameterValues "{sumEnergy, peakEnergy}" ;
            afo:type xsd:string ] .

essentia:SpectralContrastExtractor a owl:Class ;
    rdfs:label "SpectralContrast Extractor"@en ;
    dc:description """The Spectral Contrast feature is based on the Octave Based Spectral Contrast feature as described in [1]. The version implemented here is a modified version to improve discriminative power and robustness. The modifications are described in [2].

References:
  [1] D.-N. Jiang, L. Lu, H.-J. Zhang, J.-H. Tao, and L.-H. Cai, "Music type
  classification by spectral contrast feature," in IEEE International
  Conference on Multimedia and Expo (ICME’02), 2002, vol. 1, pp. 113–116.

  [2] V. Akkermans, J. Serrà, and P. Herrera, "Shape-based spectral contrast
  descriptor," in Sound and Music Computing Conference (SMC’09), 2009,
  pp. 143–148.
""" ;
    rdfs:comment "SpectralContrast Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:SpectralContrast,
        essentia:SpectralValley ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the size of the fft frames" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 2 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.15" ;
            afo:description "the ratio of the bins to distribute equally" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "staticDistribution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "22050" ;
            afo:description "the sampling rate of the audio signal" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "the lower bound of the lowest band" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lowFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "11000" ;
            afo:description "the upper bound of the highest band" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "highFrequencyBound" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "6" ;
            afo:description "the number of bands in the filter" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "numberBands" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.4" ;
            afo:description "the ratio of the bins in the sub band used to calculate the peak and valley" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "neighbourRatio" ;
            afo:type xsd:float ] .

essentia:SpectralPeaksExtractor a owl:Class ;
    rdfs:label "SpectralPeaks Extractor"@en ;
    dc:description """This algorithm extracts peaks from a spectrum. It is important to note that the peak algorithm is independent of an input that is linear or in dB, so one has to adapt the threshold to fit with the type of data fed to it. The algorithm relies on PeakDetection algorithm which is run with parabolic interpolation [1]. The exactness of the peak-searching depends heavily on the windowing type. It gives best results with dB input, a blackman-harris 92dB window and interpolation set to true. According to [1], spectral peak frequencies tend to be about twice as accurate when dB magnitude is used rather than just linear magnitude. For further information about the peak detection, see the description of the PeakDetection algorithm.

It is recommended that the input "spectrum" be computed by the Spectrum algorithm. This algorithm uses PeakDetection. See documentation for possible exceptions and input requirements on input "spectrum".

References:
  [1] Peak Detection,
  http://ccrma.stanford.edu/~jos/parshl/Peak_Detection_Steps_3.html""" ;
    rdfs:comment "SpectralPeaks Extractor"@en ;
    rdfs:subClassOf essentia:SpectralExtractors ;
    afo:input essentia:Spectrum ;
    afo:output essentia:SpectralPeaksFrequencies,
        essentia:SpectralPeaksMagnitudes ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the maximum number of returned peaks" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "maxPeaks" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "peaks below this given threshold are not outputted" ;
            afo:maximumValue "inf" ;
            afo:minimumValue "inf" ;
            afo:name "magnitudeThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0" ;
            afo:description "the minimum frequency of the range to evaluate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "frequency" ;
            afo:description "the ordering type of the outputted peaks (ascending by frequency or descending by magnitude)" ;
            afo:name "orderBy" ;
            afo:parameterValues "{frequency,magnitude}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "5000" ;
            afo:description "the maximum frequency of the range to evaluate [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:StartStopSilenceExtractor a owl:Class ;
    rdfs:label "StartStopSilence Extractor"@en ;
    dc:description "This algorithm outputs the frame at which sound begins and the frame at which sound ends." ;
    rdfs:comment "StartStopSilence Extractor"@en ;
    rdfs:subClassOf essentia:Duration_silenceExtractors ;
    afo:input essentia:Frame ;
    afo:output essentia:StartStopSilenceStartframe,
        essentia:StartStopSilenceStopframe ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "-60" ;
            afo:description "the threshold below which average energy is defined as silence [dB]" ;
            afo:maximumValue "-" ;
            afo:minimumValue "(" ;
            afo:name "threshold" ;
            afo:type xsd:integer ] .

essentia:Statistic rdfs:subClassOf afo:AudioFeature .

essentia:TempoScaleBandsExtractor a owl:Class ;
    rdfs:label "TempoScaleBands Extractor"@en ;
    dc:description """This algorithm computes features for tempo tracking. The output features should be used with the TempoTap algorithm. See standard_tempotapExtractor in examples folder.

An exception is thrown if less than 1 band is given. An exception is also thrown if the there are not an equal number of bands given as band-gains given.

Quality: outdated (the associated TempoTap algorithm is outdated, however it can be potentially used as an onset detection function for other tempo estimation algorithms although no evaluation has been done)

References:
  [1] Algorithm by Fabien Gouyon and Simon Dixon. There is no reference at
  the time of this writing.
""" ;
    rdfs:comment "TempoScaleBands Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Bands ;
    afo:output essentia:TempoScaleBandsCumulativebands,
        essentia:TempoScaleBandsScaledbands ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "512" ;
            afo:description "the frame rate in samples" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameTime" ;
            afo:type xsd:float ],
        [ afo:defaultValue "[2, 3, 2, 1, 1.20000004768, 2, 3, 2.5]" ;
            afo:description "gain for each bands" ;
            afo:name "bandsGain" ;
            afo:type rdf:List ] .

essentia:TempoTapExtractor a owl:Class ;
    rdfs:label "TempoTap Extractor"@en ;
    dc:description """This algorithm estimates the periods and phases of a periodic signal, represented by a sequence of values of any number of detection functions, such as energy bands, onsets locations, etc. It requires to be sequentially run on a vector of such values ("featuresFrame") for each particular audio frame in order to get estimations related to that frames. The estimations are done for each detection function separately, utilizing the latest "frameHop" frames, including the present one, to compute autocorrelation. Empty estimations will be returned until enough frames are accumulated in the algorithm's buffer.
The algorithm uses elements of the following beat-tracking methods:
 - BeatIt, elaborated by Fabien Gouyon and Simon Dixon (input features) [1]
 - Multi-comb filter with Rayleigh weighting, Mathew Davies [2]

Parameter "maxTempo" should be 20bpm larger than "minTempo", otherwise an exception is thrown. The same applies for parameter "frameHop", which should not be greater than numberFrames. If the supplied "tempoHints" did not match any realistic bpm value, an exeception is thrown.

This algorithm is thought to provide the input for TempoTapTicks algorithm. The "featureFrame" vectors can be formed by Multiplexer algorithm in the case of combining different features.

Quality: outdated (use TempoTapDegara instead)

References:
  [1] F. Gouyon, "A computational approach to rhythm description: Audio
  features for the computation of rhythm periodicity functions and their use
  in tempo induction and music content processing," UPF, Barcelona, Spain,
  2005.

  [2] M. Davies and M. Plumbley, "Causal tempo tracking of audio," in
  International Symposium on Music Information Retrieval (ISMIR'04), 2004.""" ;
    rdfs:comment "TempoTap Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Featuresframe ;
    afo:output essentia:TempoTapPeriods,
        essentia:TempoTapPhases ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "fastest tempo allowed to be detected [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "number of feature frames separating two evaluations" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameHop" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "slowest tempo allowed to be detected [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "256" ;
            afo:description "number of audio samples in a frame" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "number of feature frames to buffer on" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "numberFrames" ;
            afo:type xsd:integer ],
        [ afo:defaultValue "[]" ;
            afo:description "optional list of initial beat locations, to favor the detection of pre-determined tempo period and beats alignment [s]" ;
            afo:name "tempoHints" ;
            afo:type rdf:List ] .

essentia:TempoTapMaxAgreementExtractor a owl:Class ;
    rdfs:label "TempoTapMaxAgreement Extractor"@en ;
    dc:description """This algorithm estimates beat positions and confidence of their estimation based on the maximum mutual agreement between given beat postion candidates, estimated by different beat trackers (or using different features) [1,2].

Note that the input tick times should be in ascending order and that they cannot contain negative values otherwise an exception will be thrown.

References:
  [1] J. R. Zapata, A. Holzapfel, M. E. Davies, J. L. Oliveira, and
  F. Gouyon, "Assigning a confidence threshold on automatic beat annotation
  in large datasets," in International Society for Music Information
  Retrieval Conference (ISMIR’12), 2012.

  [2] A. Holzapfel, M. E. Davies, J. R. Zapata, J. L. Oliveira, and
  F. Gouyon, "Selective sampling for beat tracking evaluation," IEEE
  Transactions on Audio, Speech, and Language Processing, vol. 13, no. 9,
  pp. 2539-2548, 2012.
""" ;
    rdfs:comment "TempoTapMaxAgreement Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Tickcandidates ;
    afo:output essentia:Confidence,
        essentia:Ticks .

essentia:TempoTapTicksExtractor a owl:Class ;
    rdfs:label "TempoTapTicks Extractor"@en ;
    dc:description """This algorithm builds the list of ticks from the period and phase candidates given by the TempoTap algorithm.

Quality: outdated (use TempoTapDegara instead)

References:
  [1] F. Gouyon, "A computational approach to rhythm description: Audio
  features for the computation of rhythm periodicity functions and their use
  in tempo induction and music content processing," UPF, Barcelona, Spain,
  2005.
""" ;
    rdfs:comment "TempoTapTicks Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Periods,
        essentia:Phases ;
    afo:output essentia:TempoTapTicksMatchingperiods,
        essentia:Ticks ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "256" ;
            afo:description "number of audio samples per features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "512" ;
            afo:description "number of feature frames separating two evaluations" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameHop" ;
            afo:type xsd:integer ] .

essentia:VibratoExtractor a owl:Class ;
    rdfs:label "Vibrato Extractor"@en ;
    dc:description """Given a pitch contour [Hz], this algorithm detects the presence of vibrato and estimates the corresponding parameters. The result is the vibrato frequency in Hz and the extend (peak to peak) in cents. If no vibrato is detected in a frame, the output of both values is zero.

This algorithm should be given the outputs of a pitch estimator, i.e. PredominantMelody, PitchYinFFT or PitchMelodia and the corresponding sample rate with which it was computed.

The algorithm is an extended version of the vocal vibrato detection in PerdominantMelody.
References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.

""" ;
    rdfs:comment "Vibrato Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Pitch ;
    afo:output essentia:VibratoVibratoextend,
        essentia:VibratoVibratofrequency ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "4" ;
            afo:description "minimum considered vibrato frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "8" ;
            afo:description "maximum considered vibrato frequency [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "250" ;
            afo:description "maximum considered vibrato extend [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "maxExtend" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "50" ;
            afo:description "minimum considered vibrato extend [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minExtend" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "344.531" ;
            afo:description "sample rate of the input pitch contour" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:vector_string a afo:Signal ;
    rdfs:label "vector_string" .

essentia:BpmRubatoExtractor a owl:Class ;
    rdfs:label "BpmRubato Extractor"@en ;
    dc:description """This algorithm extracts the locations of large tempo changes from a list of beat ticks.

An exception is thrown if the input beats are not in ascending order and/or if the input beats contain duplicate values.

Quality: experimental (non-reliable, poor accuracy).

References:
  [1] Tempo Rubato - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Rubato""" ;
    rdfs:comment "BpmRubato Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Beats ;
    afo:output essentia:BpmRubatoRubatonumber,
        essentia:BpmRubatoRubatostart,
        essentia:BpmRubatoRubatostop ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.08" ;
            afo:description "minimum tempo deviation to look for" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "20" ;
            afo:description "time for the longest constant tempo region inside a rubato region [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "longRegionsPruningTime" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "4" ;
            afo:description "time for the shortest constant tempo region from one tempo region to another [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "shortRegionsMergingTime" ;
            afo:type xsd:float ] .

essentia:Confidence a owl:Class ;
    rdfs:label "Confidence"@en ;
    rdfs:comment "confidence of the beat tracker [0, 5.32]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BeatTrackerMultiFeatureExtractor,
        essentia:RhythmExtractor2013,
        essentia:TempoTapMaxAgreementExtractor ;
    afo:type essentia:real .

essentia:Contoursbins a owl:Class ;
    rdfs:label "Contoursbins"@en ;
    rdfs:comment "array of frame-wise vectors of cent bin values representing each contour"@en ;
    afo:type essentia:vector_vector_real .

essentia:Contourssaliences a owl:Class ;
    rdfs:label "Contourssaliences"@en ;
    rdfs:comment "array of frame-wise vectors of pitch saliences representing each contour"@en ;
    afo:type essentia:vector_vector_real .

essentia:Contoursstarttimes a owl:Class ;
    rdfs:label "Contoursstarttimes"@en ;
    rdfs:comment "array of the start times of each contour [s]"@en ;
    afo:type essentia:vector_real .

essentia:DistributionShapeExtractor a owl:Class ;
    rdfs:label "DistributionShape Extractor"@en ;
    dc:description """This algorithm extracts the spread (variance), skewness and kurtosis excess of an array of Reals given its central moments (see CentralMoments algorithm). These extracted features are good indicators of the shape of the distribution.
The size of the input array must be at least 5. An exception will be thrown otherwise.

References:
  [1] G. Peeters, "A large set of audio features for sound description
  (similarity and classification) in the CUIDADO project," CUIDADO I.S.T.
  Project Report, 2004.

  [2] Variance - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Variance

  [3] Skewness - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Skewness

  [4] Kurtosis - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Kurtosis""" ;
    rdfs:comment "DistributionShape Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Centralmoments ;
    afo:output essentia:Kurtosis,
        essentia:Skewness,
        essentia:Spread .

essentia:HighResolutionFeaturesExtractor a owl:Class ;
    rdfs:label "HighResolutionFeatures Extractor"@en ;
    dc:description """This algorithm computes high-resolution chroma features from an HPCP vector. The vector's size must be a multiple of 12 and it is recommended that it be larger than 120. In otherwords, the HPCP's resolution should be 10 Cents or more.
The high-resolution features being computed are:

  - Equal-temperament deviation: a measure of the deviation of HPCP local maxima with respect to equal-tempered bins. This is done by:
    a) Computing local maxima of HPCP vector
    b) Computing the deviations from equal-tempered (abs) bins and their average

  - Non-tempered energy ratio: the ratio betwen the energy on non-tempered bins and the total energy, computed from the HPCP average

  - Non-tempered peak energy ratio: the ratio betwen the energy on non tempered peaks and the total energy, computed from the HPCP average

HighFrequencyFeatures is intended to be used in conjunction with HPCP algorithm. Any input vector which size is not a positive multiple of 12, will raise an exception.

References:
  [1] E. Gómez and P. Herrera, "Comparative Analysis of Music Recordings
  from Western and Non-Western traditions by Automatic Tonal Feature
  Extraction," Empirical Musicology Review, vol. 3, pp. 140–156, 2008.""" ;
    rdfs:comment "HighResolutionFeatures Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:HPCP ;
    afo:output essentia:EqualTemperedDeviation,
        essentia:NonTemperedEnergyRatio,
        essentia:NonTemperedPeaksEnergyRatio ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "24" ;
            afo:description "maximum number of HPCP peaks to consider when calculating outputs" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "maxPeaks" ;
            afo:type xsd:integer ] .

essentia:Onsets a owl:Class ;
    rdfs:label "Onsets"@en ;
    rdfs:comment "the positions of detected onsets [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:OnsetRateExtractor,
        essentia:OnsetsExtractor,
        essentia:SuperFluxExtractor ;
    afo:type essentia:vector_real .

essentia:PCP a owl:Class ;
    rdfs:label "PCP"@en ;
    rdfs:comment "the pitch class profile from which to detect the chord"@en ;
    afo:type essentia:vector_vector_real .

essentia:PitchContourSegmentationExtractor a owl:Class ;
    rdfs:label "PitchContourSegmentation Extractor"@en ;
    dc:description """This algorithm converts a pitch sequence estimated from an audio signal into a set of discrete note event. Each note is defined by its onset time, duration and MIDI pitch value, quantized to the equal tempered scale.

Note segmentation is performed based on pitch contour characteristics (island building) and signal RMS. Notes below an adjustable minimum duration are rejected.

References:
  [1] R. J. McNab et al., "Signal processing for melody transcription," in Proc. 
  Proc. 19th Australasian Computer Science Conf., 1996""" ;
    rdfs:comment "PitchContourSegmentation Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Pitch,
        essentia:Signal ;
    afo:output essentia:Duration,
        essentia:Onset,
        essentia:PitchContourSegmentationMidipitch ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "60" ;
            afo:description "pitch threshold for note segmentation [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pitchDistanceThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "sample rate of the audio signal" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "-2" ;
            afo:description "zscore threshold for note segmentation" ;
            afo:maximumValue 0 ;
            afo:minimumValue "inf" ;
            afo:name "rmsThreshold" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "440" ;
            afo:description "tuning reference frequency  [Hz]" ;
            afo:maximumValue 22000 ;
            afo:minimumValue 0 ;
            afo:name "tuningFreq" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "hop size of the extracted pitch" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "minimum note duration [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minDur" ;
            afo:type xsd:float ] .

essentia:SingleGaussianExtractor a owl:Class ;
    rdfs:label "SingleGaussian Extractor"@en ;
    dc:description """This algorithm implements the single gaussian method. For example, using the single gaussian on descriptors like MFCC with the symmetric Kullback-Leibler divergence might be a much better option than just the mean and variance of the descriptors over a whole signal.

An exception is thrown if the covariance of the input matrix is singular or if the input matrix is empty.

References:
  [1] E. Pampalk, "Computational models of music similarity and their
  application in music information retrieval,” Vienna University of
  Technology, 2006.""" ;
    rdfs:comment "SingleGaussian Extractor"@en ;
    rdfs:subClassOf essentia:StatisticExtractors ;
    afo:input essentia:Matrix ;
    afo:output essentia:Covariance,
        essentia:Mean,
        essentia:SingleGaussianInversecovariance .

essentia:TuningFrequencyExtractor a owl:Class ;
    rdfs:label "TuningFrequency Extractor"@en,
        "TuningFrequencyExtractor"@en ;
    dc:description """Given a sequence/set of spectral peaks, this algorithm estimates the tuning frequency of a given song. The result is the tuning frequency in Hz, and its distance from 440Hz in cents. This version is slightly adapted from the original algorithm by Emilia Gomez, but gives the same results.

Input vectors should have the same size, otherwise an exception is thrown. This algorithm should be given the outputs of the spectral peaks algorithm.

Application: Western vs non-western music classification, key estimation, HPCP computation, tonal similarity.
References:
  [1] E. Gómez, "Key estimation from polyphonic audio," in Music Information
  Retrieval Evaluation Exchange (MIREX’05), 2005.""",
        "this algorithm extracts the tuning frequency of an audio signal" ;
    rdfs:comment "TuningFrequency Extractor"@en,
        "TuningFrequencyExtractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Frequencies,
        essentia:Magnitudes,
        essentia:Signal ;
    afo:output essentia:TuningFrequency,
        essentia:TuningFrequencyExtractorTuningfrequency,
        essentia:TuningFrequencyTuningcents ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "4096" ;
            afo:description "the frameSize for computing tuning frequency" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1" ;
            afo:description "resolution in cents (logarithmic scale, 100 cents = 1 semitone) for tuning frequency determination" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "resolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the hopsize for computing tuning frequency" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ] .

essentia:BPM a owl:Class ;
    rdfs:label "BPM"@en ;
    rdfs:comment "the bpm candidates sorted by magnitude"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:NoveltyCurveFixedBpmEstimatorExtractor,
        essentia:RhythmDescriptorsExtractor,
        essentia:RhythmExtractor,
        essentia:RhythmExtractor2013 ;
    afo:type essentia:vector_real .

essentia:Frame a owl:Class ;
    rdfs:label "Frame"@en ;
    rdfs:comment "the input audio frame"@en ;
    afo:type essentia:vector_real .

essentia:KeyExtractor a owl:Class ;
    rdfs:label "Key Extractor"@en,
        "KeyExtractor"@en ;
    dc:description """Using pitch profile classes, this algorithm calculates the best matching key estimate for a given HPCP. The algorithm was severely adapted and changed from the original implementation for readability and speed.

Key will throw exceptions either when the input pcp size is not a positive multiple of 12 or if the key could not be found. Also if parameter "scale" is set to "minor" and the profile type is set to "weichai"

References:
  [1] E. Gómez, "Tonal Description of Polyphonic Audio for Music Content
  Processing," INFORMS Journal on Computing, vol. 18, no. 3, pp. 294–304,
  2006.

  [2] D. Temperley, "What's key for key? The Krumhansl-Schmuckler
  key-finding algorithm reconsidered", Music Perception vol. 17, no. 1,
  pp. 65-100, 1999.""",
        "this algorithm extracts tonal features" ;
    rdfs:comment "Key Extractor"@en,
        "KeyExtractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Audio,
        essentia:PCP ;
    afo:output essentia:Key,
        essentia:KeyFirsttosecondrelativestrength,
        essentia:KeyScale,
        essentia:KeyStrength ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "temperley" ;
            afo:description "the type of polyphic profile to use for correlation calculation" ;
            afo:name "profileType" ;
            afo:parameterValues "{diatonic,krumhansl,temperley,weichai,tonictriad,temperley2005,thpcp,shaath,gomez}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "440" ;
            afo:description "the tuning frequency of the input signal" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "tuningFrequency" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "36" ;
            afo:description "number of array elements used to represent a semitone times 12 (this parameter is only a hint, during computation, the size of the input PCP is used instead)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 12 ;
            afo:name "pcpSize" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "enables the use of polyphonic profiles to define key profiles (this includes the contributions from triads as well as pitch harmonics)" ;
            afo:name "usePolyphony" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "2048" ;
            afo:description "the hopsize for computing tonal features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "consider only the 3 main triad chords of the key (T, D, SD) to build the polyphonic profiles" ;
            afo:name "useThreeChords" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "4" ;
            afo:description "number of harmonics that should contribute to the polyphonic profile (1 only considers the fundamental harmonic)" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 1 ;
            afo:name "numHarmonics" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "4096" ;
            afo:description "the framesize for computing tonal features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.6" ;
            afo:description "value of the slope of the exponential harmonic contribution to the polyphonic profile" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "slope" ;
            afo:type xsd:float ] .

essentia:LoudnessEBUR128Extractor a owl:Class ;
    rdfs:label "LoudnessEBUR128 Extractor"@en ;
    dc:description """This algorithm computes loudness descriptors in accordance with EBU R128 recommendation.
- The input stereo signal is preprocessed with a K-weighting filter [2] (see LoudnessEBUR128Filter algorithm), composed of two stages: a shelving filter and a high-pass filter (RLB-weighting curve).
- Momentary loudness is computed by integrating the sum of powers over a sliding rectangular window of 400 ms. The measurement is not gated.
- Short-term loudness is computed by integrating the sum of powers over a sliding rectangular window of 3 seconds. The measurement is not gated.
- Integrated loudness is a loudness value averaged over an arbitrary long time interval with gating of 400 ms blocks with two thresholds [2].
  - Absolute 'silence' gating threshold at -70 LUFS for the computation of the absolute-gated loudness level.
  - Relative gating threshold, 10 LU below the absolute-gated loudness level.
- Loudness range is computed from short-term loudness values. It is defined as the difference between the estimates of the 10th and 95th percentiles of the distribution of the loudness values with applied gating [3].
  - Absolute 'silence' gating threshold at -70 LUFS for the computation of the absolute-gated loudness level.
  - Relative gating threshold, -20 LU below the absolute-gated loudness level.

References:
  [1] EBU Tech 3341-2011. "Loudness Metering: 'EBU Mode' metering to supplement
  loudness normalisation in accordance with EBU R 128"
  [2] ITU-R BS.1770-2. "Algorithms to measure audio programme loudness and true-peak audio level
  [3] EBU Tech Doc 3342-2011. "Loudness Range: A measure to supplement loudness
  normalisation in accordance with EBU R 128"
  [4] http://tech.ebu.ch/loudness
  [5] http://en.wikipedia.org/wiki/LKFS
""" ;
    rdfs:comment "LoudnessEBUR128 Extractor"@en ;
    rdfs:subClassOf essentia:Loudness_dynamicsExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:LoudnessEBUR128Integratedloudness,
        essentia:LoudnessEBUR128Loudnessrange,
        essentia:LoudnessEBUR128Momentaryloudness,
        essentia:LoudnessEBUR128Shorttermloudness ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "the hop size with which the loudness is computed [s]" ;
            afo:maximumValue 1e-01 ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ] .

essentia:PitchContoursExtractor a owl:Class ;
    rdfs:label "PitchContours Extractor"@en ;
    dc:description """This algorithm tracks a set of predominant pitch contours from an audio signal. This algorithm is intended to receive its "frequencies" and "magnitudes" inputs from the PitchSalienceFunctionPeaks algorithm outputs aggregated over all frames in the sequence. The output is a vector of estimated melody pitch values.

When input vectors differ in size, an exception is thrown. Input vectors must not contain negative salience values otherwise an exception is thrown. Avoiding erroneous peak duplicates (peaks of the same cent bin) is up to the user's own control and is highly recommended, but no exception will be thrown.

Recommended processing chain: (see [1]): EqualLoudness -> frame slicing with sample rate = 44100, frame size = 2048, hop size = 128 -> Windowing with Hann, x4 zero padding -> Spectrum -> SpectralPeaks -> PitchSalienceFunction (10 cents bin resolution) -> PitchSalienceFunctionPeaks.

References:
  [1] J. Salamon and E. Gómez, "Melody extraction from polyphonic music
  signals using pitch contour characteristics," IEEE Transactions on Audio,
  Speech, and Language Processing, vol. 20, no. 6, pp. 1759–1770, 2012.
""" ;
    rdfs:comment "PitchContours Extractor"@en ;
    rdfs:subClassOf essentia:PitchExtractors ;
    afo:input essentia:Peakbins,
        essentia:Peaksaliences ;
    afo:output essentia:PitchContoursContoursbins,
        essentia:PitchContoursContourssaliences,
        essentia:PitchContoursContoursstarttimes,
        essentia:PitchContoursDuration ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "27.5625" ;
            afo:description "pitch continuity cue (maximum allowed pitch change durig 1 ms time period) [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "pitchContinuity" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "128" ;
            afo:description "the hop size with which the pitch salience function was computed" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "10" ;
            afo:description "salience function bin resolution [cents]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "binResolution" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "per-frame salience threshold factor (fraction of the highest peak salience in a frame)" ;
            afo:maximumValue 1 ;
            afo:minimumValue 0 ;
            afo:name "peakFrameThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "time continuity cue (the maximum allowed gap duration for a pitch contour) [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "timeContinuity" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.9" ;
            afo:description "allowed deviation below the peak salience mean over all frames (fraction of the standard deviation)" ;
            afo:maximumValue 2 ;
            afo:minimumValue 0 ;
            afo:name "peakDistributionThreshold" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "100" ;
            afo:description "the minimum allowed contour duration [ms]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "minDuration" ;
            afo:type xsd:float ] .

essentia:RhythmExtractor a owl:Class ;
    rdfs:label "RhythmExtractor"@en ;
    dc:description """This algorithm estimates the tempo in bpm from an input signal, as well as the beat locations. It combines TempoTap and TempoTapTicks.

Note that this algorithm is outdated in terms of beat tracking accuracy, and it is highly recommended to use RhythmExtractor2013 instead.

Quality: outdated (use RhythmExtractor2013 instead).

An exception is thrown if neither "useOnset" nor "useBands" are enabled (i.e. set to true).""" ;
    rdfs:comment "RhythmExtractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:BPM,
        essentia:Estimates,
        essentia:RhythmExtractorBpmintervals,
        essentia:Ticks ;
    afo:parameter [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "the number audio samples used to compute a feature" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameSize" ;
            afo:type xsd:integer ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "whether or not to use onsets as periodicity function" ;
            afo:name "useOnset" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.1" ;
            afo:description "the minimum interval between last beat and end of file [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "lastBeatInterval" ;
            afo:type xsd:float ],
        [ a afo:IndexedParameter ;
            afo:defaultValue "true" ;
            afo:description "whether or not to use band energy as periodicity function" ;
            afo:name "useBands" ;
            afo:parameterValues "{true,false}" ;
            afo:type xsd:boolean ],
        [ a afo:NumericParameter ;
            afo:defaultValue "44100" ;
            afo:description "the sampling rate of the audio signal [Hz]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "sampleRate" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the slowest tempo to detect [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "the fastest tempo to detect [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "0.24" ;
            afo:description "the minimum interval between two consecutive beats [s]" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "tolerance" ;
            afo:type xsd:float ],
        [ a afo:NumericParameter ;
            afo:defaultValue "256" ;
            afo:description "the number of audio samples per features" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "hopSize" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "the number of feature frames separating two evaluations" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "frameHop" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "1024" ;
            afo:description "the number of feature frames to buffer on" ;
            afo:maximumValue "inf" ;
            afo:minimumValue 0 ;
            afo:name "numberFrames" ;
            afo:type xsd:integer ],
        [ afo:defaultValue "[]" ;
            afo:description "the optional list of initial beat locations, to favor the detection of pre-determined tempo period and beats alignment [s]" ;
            afo:name "tempoHints" ;
            afo:type rdf:List ] .

essentia:integer a afo:Signal ;
    rdfs:label "integer" .

essentia:pool a afo:Signal ;
    rdfs:label "pool" .

essentia:ChordsDescriptorsExtractor a owl:Class ;
    rdfs:label "ChordsDescriptors Extractor"@en ;
    dc:description """Given a chord progression this algorithm describes it by means of key, scale, histogram, and rate of change.
Note:
  - chordsHistogram indexes follow the circle of fifths order, while being shifted to the input key and scale
  - key and scale are taken from the most frequent chord. In the case where multiple chords are equally frequent, the chord is hierarchically chosen from the circle of fifths.
  - valid chords are C, Em, G, Bm, D, F#m, A, C#m, E, G#m, B, D#m, F#, A#m, C#, Fm, G#, Cm, D#, Gm, A#, Dm, F, Am. Chords that not follow this terminology (i.e. Gb) will raise an exception.

Input chords vector may not be empty, otherwise an exception is thrown.

References:
  [1] Chord progression - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Chord_progression

  [2] Circle of fifths - Wikipedia, the free encyclopedia,
  http://en.wikipedia.org/wiki/Circle_of_fifths""" ;
    rdfs:comment "ChordsDescriptors Extractor"@en ;
    rdfs:subClassOf essentia:TonalExtractors ;
    afo:input essentia:Chords,
        essentia:Key,
        essentia:Scale ;
    afo:output essentia:ChordsChangesRate,
        essentia:ChordsHistogram,
        essentia:ChordsKey,
        essentia:ChordsNumberRate,
        essentia:ChordsScale .

essentia:Duration a owl:Class ;
    rdfs:label "Duration"@en ;
    rdfs:comment "the duration of the signal [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:DurationExtractor,
        essentia:PitchContourSegmentationExtractor ;
    afo:type essentia:real .

essentia:Duration_silenceExtractors a owl:Class ;
    rdfs:label "Duration/silence Extractors"@en ;
    rdfs:comment "Essentia duration/silence extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:Loudness a owl:Class ;
    rdfs:label "Loudness"@en ;
    rdfs:comment "the loudness at each beat"@en ;
    afo:computed_by essentia:LevelExtractor,
        essentia:LoudnessExtractor,
        essentia:LoudnessVickersExtractor,
        essentia:SingleBeatLoudnessExtractor ;
    afo:type essentia:vector_real .

essentia:RhythmExtractor2013 a owl:Class ;
    rdfs:label "RhythmExtractor2013"@en ;
    dc:description """This algorithm estimates the beat locations and the confidence of their estimation given an input signal, as well as its tempo in bpm. The beat locations can be computed using:
  - 'multifeature', the BeatTrackerMultiFeature algorithm
  - 'degara', the BeatTrackerDegara algorithm (note that there is no confidence estimation for this method, the output confidence value is always 0)

See BeatTrackerMultiFeature and  BeatTrackerDegara algorithms for more details.

Note that the algorithm requires the sample rate of the input signal to be 44100 Hz in order to work correctly.
""" ;
    rdfs:comment "RhythmExtractor2013"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:BPM,
        essentia:Confidence,
        essentia:Estimates,
        essentia:RhythmExtractor2013Bpmintervals,
        essentia:Ticks ;
    afo:parameter [ a afo:IndexedParameter ;
            afo:defaultValue "multifeature" ;
            afo:description "the method used for beat tracking" ;
            afo:name "method" ;
            afo:parameterValues "{multifeature,degara}" ;
            afo:type xsd:string ],
        [ a afo:NumericParameter ;
            afo:defaultValue "208" ;
            afo:description "the fastest tempo to detect [bpm]" ;
            afo:maximumValue 250 ;
            afo:minimumValue 60 ;
            afo:name "maxTempo" ;
            afo:type xsd:integer ],
        [ a afo:NumericParameter ;
            afo:defaultValue "40" ;
            afo:description "the slowest tempo to detect [bpm]" ;
            afo:maximumValue 180 ;
            afo:minimumValue 40 ;
            afo:name "minTempo" ;
            afo:type xsd:integer ] .

essentia:string a afo:Signal ;
    rdfs:label "string" .

essentia:Envelope a owl:Class ;
    rdfs:label "Envelope"@en ;
    rdfs:comment "the envelope of the signal"@en ;
    afo:computed_by essentia:EnvelopeExtractor ;
    afo:type essentia:vector_real .

essentia:BpmHistogramDescriptorsExtractor a owl:Class ;
    rdfs:label "BpmHistogramDescriptors Extractor"@en ;
    dc:description """This algorithm computes beats per minute histogram and its statistics for the highest and second highest peak.
Note: histogram vector contains occurance frequency for each bpm value, 0-th element corresponds to 0 bpm value.""" ;
    rdfs:comment "BpmHistogramDescriptors Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:BPMintervals ;
    afo:output essentia:BPMHistogram,
        essentia:FirstPeakBPM,
        essentia:FirstPeakSpread,
        essentia:FirstPeakWeight,
        essentia:SecondPeakBPM,
        essentia:SecondPeakSpread,
        essentia:SecondPeakWeight .

essentia:VersionInfo a owl:Class ;
    rdfs:label "VersionInfo"@en ;
    rdfs:comment "Essentia Version Info"@en .

essentia:matrix_real a afo:Signal ;
    rdfs:label "matrix_real" .

essentia:Ticks a owl:Class ;
    rdfs:label "Ticks"@en ;
    rdfs:comment " the estimated tick locations [s]"@en ;
    rdfs:subClassOf afo:AudioFeature ;
    afo:computed_by essentia:BeatTrackerDegaraExtractor,
        essentia:BeatTrackerMultiFeatureExtractor,
        essentia:RhythmExtractor,
        essentia:RhythmExtractor2013,
        essentia:TempoTapDegaraExtractor,
        essentia:TempoTapMaxAgreementExtractor,
        essentia:TempoTapTicksExtractor ;
    afo:type essentia:vector_real .

essentia:Envelope_SFXExtractors a owl:Class ;
    rdfs:label "Envelope/SFX Extractors"@en ;
    rdfs:comment "Essentia envelope/sfx extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:Frequencies a owl:Class ;
    rdfs:label "Frequencies"@en ;
    rdfs:comment "the frequencies of the spectral peaks (must be sorted by frequency)"@en ;
    afo:type essentia:vector_real .

essentia:Loudness_dynamicsExtractors a owl:Class ;
    rdfs:label "Loudness/dynamics Extractors"@en ;
    rdfs:comment "Essentia loudness/dynamics extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:Magnitudes a owl:Class ;
    rdfs:label "Magnitudes"@en ;
    rdfs:comment "the magnitudes of the spectral peaks (must be sorted by frequency"@en ;
    afo:type essentia:vector_real .

essentia:RhythmDescriptorsExtractor a owl:Class ;
    rdfs:label "RhythmDescriptors Extractor"@en ;
    dc:description "this algorithm computes low level rhythm features" ;
    rdfs:comment "RhythmDescriptors Extractor"@en ;
    rdfs:subClassOf essentia:RhythmExtractors ;
    afo:input essentia:Signal ;
    afo:output essentia:BPM,
        essentia:BPMEstimates,
        essentia:BPMIntervals,
        essentia:BeatsPosition,
        essentia:FirstPeakBPM,
        essentia:FirstPeakSpread,
        essentia:FirstPeakWeight,
        essentia:SecondPeakBPM,
        essentia:SecondPeakSpread,
        essentia:SecondPeakWeight .

essentia:Pitch a owl:Class ;
    rdfs:label "Pitch"@en ;
    rdfs:comment "the array of pitch values [Hz]"@en ;
    afo:computed_by essentia:PitchContoursMelodyExtractor,
        essentia:PitchContoursMonoMelodyExtractor,
        essentia:PitchMelodiaExtractor,
        essentia:PitchYinExtractor,
        essentia:PitchYinFFTExtractor,
        essentia:PredominantPitchMelodiaExtractor ;
    afo:type essentia:vector_real .

essentia:TonalExtractors a owl:Class ;
    rdfs:label "Tonal Extractors"@en ;
    rdfs:comment "Essentia tonal extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:PitchExtractors a owl:Class ;
    rdfs:label "Pitch Extractors"@en ;
    rdfs:comment "Essentia pitch extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:Array a owl:Class ;
    rdfs:label "Array"@en ;
    rdfs:comment "the input array"@en ;
    afo:type essentia:vector_real .

essentia:vector_vector_real a afo:Signal ;
    rdfs:label "vector_vector_real" .

essentia:Spectrum a owl:Class ;
    rdfs:label "Spectrum"@en ;
    rdfs:comment "the input spectrum"@en ;
    afo:computed_by essentia:SpectrumExtractor ;
    afo:type essentia:vector_real .

essentia:SpectralExtractors a owl:Class ;
    rdfs:label "Spectral Extractors"@en ;
    rdfs:comment "Essentia spectral extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:StatisticExtractors a owl:Class ;
    rdfs:label "Statistic Extractors"@en ;
    rdfs:comment "Essentia statistic extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:RhythmExtractors a owl:Class ;
    rdfs:label "Rhythm Extractors"@en ;
    rdfs:comment "Essentia rhythm extractors"@en ;
    rdfs:subClassOf afo:FeatureExtractor .

essentia:Signal a owl:Class ;
    rdfs:label "Signal"@en ;
    rdfs:comment "Signal"@en,
        "the audio input signal"@en ;
    rdfs:subClassOf mo:DigitalSignal ;
    afo:type essentia:vector_real .

essentia:real a afo:Signal ;
    rdfs:label "real" .

essentia:vector_real a afo:Signal ;
    rdfs:label "vector_real" .

